{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAUA;;AACA;;;;;;;;;;;;;;;;;;AAyFc,kBACZA,QADY,EAEZC,QAFY,EAGZC,WAHY,EAIZC,SAJY,EAIG;;;EAEf,IAAMC,IAAI,qCAAMH,QAAN,EAAiBC,WAAjB,CAAV;EACA,IAAMG,gBAAgB,GAAG,4BAAcL,QAAd,EAAwBC,QAAxB,EAAkC,IAAlC,EAAwCE,SAAxC,CAAzB;EAEA;IAAA;;IAAA;;IAAO;MAAA;;MAAA;;MASL,iBAAW,KAAX;MAGA,cAAQ;QACNG,YAAY,EAAEC,IAAI,CAACC,QAAL,CAAcP,QAAd;MADR,CAAR;MAZK;IAsDN;;IAtDD;MAAA;MAAA,OAgBE;QAAA;UAAA;YAAA;cAAA;gBACE,KAAKQ,QAAL,GAAgB,IAAhB;;gBADF,IAEO,KAAKC,KAAL,CAAWJ,YAFlB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,mCAGUC,IAAI,CAACI,SAAL,CAAeP,IAAf,CAHV;;cAAA;gBAII,KAAKK,QAAL,IAAiB,KAAKG,QAAL,CAAc;kBAAEN,YAAY,EAAE;gBAAhB,CAAd,CAAjB;;cAJJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAhBF;MAAA;MAAA,OAwBE,gCAAoB;QAClB,KAAKG,QAAL,GAAgB,KAAhB;MACD;IA1BH;MAAA;MAAA,OA4BE,wBAAeI,KAAf,EAAoB;QAClB,IAAI,KAAKC,KAAT,EAAgB;UACd,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,KAA1B;QACD;MACF;IAhCH;MAAA;MAAA,OAkCE,kBAAM;QAAA;;QACJ,IAAIG,OAAO,IAAI,KAAKH,KAAL,CAAWI,IAAtB,IAA8B,EAAE,KAAKJ,KAAL,CAAWI,IAAX,IAAmBjB,QAArB,CAAlC,EAAkE;UAChEkB,OAAO,CAACC,IAAR,QACM,KAAKN,KAAL,CAAWI,IADjB,iDAC+DhB,QAD/D;QAGD;;QAED,IAAI,CAAC,KAAKS,KAAL,CAAWJ,YAAhB,EAA8B;UAC5B,OAAO,qBAAC,iBAAD,KAAP;QACD;;QAED,OACE,qBAAC,gBAAD;UACE,GAAG,EAAE,aAACc,IAAD,EAAS;YACZ,MAAI,CAACN,KAAL,GAAaM,IAAb;UACD;QAHH,GAIM,KAAKP,KAJX,EADF;MAQD;IArDH;IAAA;EAAA,EAA0BQ,eAAMC,SAAhC,GACSC,kBAAelB,gBAAgB,CAACmB,YADzC,EAESD,YAAS,yBAA0BA,EAA1B,CAFlB,EAGSA,cAAWvB,QAHpB,EAISuB,oBAAiB;IAAA,OAAMvB,QAAN;EAAA,CAJ1B,EAKSuB,mBAAgB;IAAA,OAAMtB,QAAN;EAAA,CALzB,EAMSsB,cAAW;IAAA,OAAMhB,IAAI,CAACI,SAAL,CAAeP,IAAf,CAAN;EAAA,CANpB,EAOSmB,UAAOnB,IAPhB;AAuDD","names":["glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","fontIsLoaded","Font","isLoaded","_mounted","state","loadAsync","setState","props","_icon","setNativeProps","__DEV__","name","console","warn","view","React","Component","_a","defaultProps"],"sourceRoot":"","sources":["../src/createIconSet.tsx"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"]}