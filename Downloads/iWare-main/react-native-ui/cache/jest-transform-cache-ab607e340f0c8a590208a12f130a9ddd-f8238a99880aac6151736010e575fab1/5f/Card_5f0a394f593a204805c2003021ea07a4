c5aaea2d56ee1c51ddc4e7eb1cf82b51
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _CardDivider = _interopRequireDefault(require("./CardDivider"));

var _CardImage = _interopRequireDefault(require("./CardImage"));

var _CardFeaturedTitle = _interopRequireDefault(require("./CardFeaturedTitle"));

var _CardFeaturedSubtitle = _interopRequireDefault(require("./CardFeaturedSubtitle"));

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Card = function Card(props) {
  var _a, _b;

  var children = props.children,
      containerStyle = props.containerStyle,
      wrapperStyle = props.wrapperStyle,
      theme = props.theme,
      attributes = __rest(props, ["children", "containerStyle", "wrapperStyle", "theme"]);

  return (0, _jsxRuntime.jsx)(_reactNative.View, _objectSpread(_objectSpread({}, attributes), {}, {
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)({
      backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.white,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    })), containerStyle && containerStyle]),
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle]),
      children: children
    })
  }));
};

exports.Card = Card;

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  }
});

var ThemedCard = (0, _extends2.default)((0, _config.withTheme)(Card, 'Card'), {
  Divider: _CardDivider.default,
  Image: _CardImage.default,
  Title: _CardTitle.default,
  FeaturedTitle: _CardFeaturedTitle.default,
  FeaturedSubtitle: _CardFeaturedSubtitle.default
});
var _default = ThemedCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkNhcmQiLCJwcm9wcyIsIl9hIiwiX2IiLCJjaGlsZHJlbiIsImNvbnRhaW5lclN0eWxlIiwid3JhcHBlclN0eWxlIiwidGhlbWUiLCJhdHRyaWJ1dGVzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvcnMiLCJ3aGl0ZSIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsIm1hcmdpbiIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckNvbG9yIiwiZ3JleTUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJkZWZhdWx0Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJzdHlsZXMiLCJ3cmFwcGVyIiwiY3JlYXRlIiwiVGhlbWVkQ2FyZCIsIndpdGhUaGVtZSIsIkRpdmlkZXIiLCJDYXJkRGl2aWRlciIsIkltYWdlIiwiQ2FyZEltYWdlIiwiVGl0bGUiLCJDYXJkVGl0bGUiLCJGZWF0dXJlZFRpdGxlIiwiQ2FyZEZlYXR1cmVkVGl0bGUiLCJGZWF0dXJlZFN1YnRpdGxlIiwiQ2FyZEZlYXR1cmVkU3VidGl0bGUiXSwic291cmNlcyI6WyJDYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENhcmRUaXRsZSBmcm9tICcuL0NhcmRUaXRsZSc7XG5pbXBvcnQgQ2FyZERpdmlkZXIgZnJvbSAnLi9DYXJkRGl2aWRlcic7XG5pbXBvcnQgQ2FyZEltYWdlIGZyb20gJy4vQ2FyZEltYWdlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRUaXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFRpdGxlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRTdWJ0aXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFN1YnRpdGxlJztcbmNvbnN0IENhcmQgPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGNvbnRhaW5lclN0eWxlLCB3cmFwcGVyU3R5bGUsIHRoZW1lIH0gPSBwcm9wcywgYXR0cmlidXRlcyA9IF9fcmVzdChwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjb250YWluZXJTdHlsZVwiLCBcIndyYXBwZXJTdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICByZXR1cm4gKDxWaWV3IHsuLi5hdHRyaWJ1dGVzfSBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7IGJhY2tncm91bmRDb2xvcjogKF9hID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLndoaXRlLCBib3JkZXJXaWR0aDogMSwgcGFkZGluZzogMTUsIG1hcmdpbjogMTUsIG1hcmdpbkJvdHRvbTogMCwgYm9yZGVyQ29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncmV5NSB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsMCwwLCAuMiknLFxuICAgICAgICAgICAgICAgIHNoYWRvd09mZnNldDogeyBoZWlnaHQ6IDAsIHdpZHRoOiAwIH0sXG4gICAgICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSksXG4gICAgICAgIGNvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlLFxuICAgIF0pfT5cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMud3JhcHBlcixcbiAgICAgICAgd3JhcHBlclN0eWxlICYmIHdyYXBwZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgd3JhcHBlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgfSxcbn0pO1xuZXhwb3J0IHsgQ2FyZCB9O1xuY29uc3QgVGhlbWVkQ2FyZCA9IE9iamVjdC5hc3NpZ24od2l0aFRoZW1lKENhcmQsICdDYXJkJyksIHtcbiAgICBEaXZpZGVyOiBDYXJkRGl2aWRlcixcbiAgICBJbWFnZTogQ2FyZEltYWdlLFxuICAgIFRpdGxlOiBDYXJkVGl0bGUsXG4gICAgRmVhdHVyZWRUaXRsZTogQ2FyZEZlYXR1cmVkVGl0bGUsXG4gICAgRmVhdHVyZWRTdWJ0aXRsZTogQ2FyZEZlYXR1cmVkU3VidGl0bGUsXG59KTtcbmV4cG9ydCBkZWZhdWx0IFRoZW1lZENhcmQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBbEJBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0VBQ2xELElBQUlDLENBQUMsR0FBRyxFQUFSOztFQUNBLEtBQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0lBQWlCLElBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUCxDQUFyQyxFQUF3Q0csQ0FBeEMsS0FBOENGLENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFWLElBQWUsQ0FBakUsRUFDYkQsQ0FBQyxDQUFDQyxDQUFELENBQUQsR0FBT0gsQ0FBQyxDQUFDRyxDQUFELENBQVI7RUFESjs7RUFFQSxJQUFJSCxDQUFDLElBQUksSUFBTCxJQUFhLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQWQsS0FBd0MsVUFBekQsRUFD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