751cc82feac7a4b398087714c536429c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileExtension = getFileExtension;
exports.getFilename = getFilename;
exports.getManifestBaseUrl = getManifestBaseUrl;

var _urlParse = _interopRequireDefault(require("url-parse"));

function getFilename(url) {
  var _URL = new _urlParse.default(url, {}),
      pathname = _URL.pathname;

  return pathname.substring(pathname.lastIndexOf('/') + 1);
}

function getFileExtension(url) {
  var filename = getFilename(url);
  var dotIndex = filename.lastIndexOf('.');
  return dotIndex > 0 ? filename.substring(dotIndex) : '';
}

function getManifestBaseUrl(manifestUrl) {
  var urlObject = new _urlParse.default(manifestUrl, {});

  if (urlObject.protocol === 'exp:') {
    urlObject.set('protocol', 'http:');
  } else if (urlObject.protocol === 'exps:') {
    urlObject.set('protocol', 'https:');
  }

  var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);
  urlObject.set('pathname', directory);
  urlObject.set('query', '');
  urlObject.set('hash', '');
  return urlObject.href;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRU0sU0FBVUEsV0FBVixDQUFzQkMsR0FBdEIsRUFBaUM7RUFDckMsV0FBcUIsSUFBSUMsaUJBQUosQ0FBUUQsR0FBUixFQUFhLEVBQWIsQ0FBckI7RUFBQSxJQUFRRSxRQUFSLFFBQVFBLFFBQVI7O0VBQ0EsT0FBT0EsUUFBUSxDQUFDQyxTQUFULENBQW1CRCxRQUFRLENBQUNFLFdBQVQsQ0FBcUIsR0FBckIsSUFBNEIsQ0FBL0MsQ0FBUDtBQUNEOztBQUVLLFNBQVVDLGdCQUFWLENBQTJCTCxHQUEzQixFQUFzQztFQUMxQyxJQUFNTSxRQUFRLEdBQUdQLFdBQVcsQ0FBQ0MsR0FBRCxDQUE1QjtFQUNBLElBQU1PLFFBQVEsR0FBR0QsUUFBUSxDQUFDRixXQUFULENBQXFCLEdBQXJCLENBQWpCO0VBRUEsT0FBT0csUUFBUSxHQUFHLENBQVgsR0FBZUQsUUFBUSxDQUFDSCxTQUFULENBQW1CSSxRQUFuQixDQUFmLEdBQThDLEVBQXJEO0FBQ0Q7O0FBYUssU0FBVUMsa0JBQVYsQ0FBNkJDLFdBQTdCLEVBQWdEO0VBQ3BELElBQU1DLFNBQVMsR0FBRyxJQUFJVCxpQkFBSixDQUFRUSxXQUFSLEVBQXFCLEVBQXJCLENBQWxCOztFQUdBLElBQUlDLFNBQVMsQ0FBQ0MsUUFBVixLQUF1QixNQUEzQixFQUFtQztJQUNqQ0QsU0FBUyxDQUFDRSxHQUFWLENBQWMsVUFBZCxFQUEwQixPQUExQjtFQUNELENBRkQsTUFFTyxJQUFJRixTQUFTLENBQUNDLFFBQVYsS0FBdUIsT0FBM0IsRUFBb0M7SUFDekNELFNBQVMsQ0FBQ0UsR0FBVixDQUFjLFVBQWQsRUFBMEIsUUFBMUI7RUFDRDs7RUFHRCxJQUFNQyxTQUFTLEdBQUdILFNBQVMsQ0FBQ1IsUUFBVixDQUFtQkMsU0FBbkIsQ0FBNkIsQ0FBN0IsRUFBZ0NPLFNBQVMsQ0FBQ1IsUUFBVixDQUFtQkUsV0FBbkIsQ0FBK0IsR0FBL0IsSUFBc0MsQ0FBdEUsQ0FBbEI7RUFDQU0sU0FBUyxDQUFDRSxHQUFWLENBQWMsVUFBZCxFQUEwQkMsU0FBMUI7RUFDQUgsU0FBUyxDQUFDRSxHQUFWLENBQWMsT0FBZCxFQUF1QixFQUF2QjtFQUNBRixTQUFTLENBQUNFLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLEVBQXRCO0VBRUEsT0FBT0YsU0FBUyxDQUFDSSxJQUFqQjtBQUNEIiwibmFtZXMiOlsiZ2V0RmlsZW5hbWUiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiZ2V0RmlsZUV4dGVuc2lvbiIsImZpbGVuYW1lIiwiZG90SW5kZXgiLCJnZXRNYW5pZmVzdEJhc2VVcmwiLCJtYW5pZmVzdFVybCIsInVybE9iamVjdCIsInByb3RvY29sIiwic2V0IiwiZGlyZWN0b3J5IiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQXNzZXRVcmlzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVUkwgZnJvbSAndXJsLXBhcnNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVuYW1lKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgeyBwYXRobmFtZSB9ID0gbmV3IFVSTCh1cmwsIHt9KTtcbiAgcmV0dXJuIHBhdGhuYW1lLnN1YnN0cmluZyhwYXRobmFtZS5sYXN0SW5kZXhPZignLycpICsgMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlRXh0ZW5zaW9uKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZmlsZW5hbWUgPSBnZXRGaWxlbmFtZSh1cmwpO1xuICBjb25zdCBkb3RJbmRleCA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gIC8vIElnbm9yZSBsZWFkaW5nIGRvdHMgZm9yIGhpZGRlbiBmaWxlc1xuICByZXR1cm4gZG90SW5kZXggPiAwID8gZmlsZW5hbWUuc3Vic3RyaW5nKGRvdEluZGV4KSA6ICcnO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgVVJMIGZyb20gYSBtYW5pZmVzdCdzIFVSTC4gRm9yIGV4YW1wbGUsIGdpdmVuIGEgbWFuaWZlc3QgaG9zdGVkIGF0XG4gKiBodHRwczovL2V4YW1wbGUuY29tL2FwcC9tYW5pZmVzdC5qc29uLCB0aGUgYmFzZSBVUkwgd291bGQgYmUgaHR0cHM6Ly9leGFtcGxlLmNvbS9hcHAvLiBRdWVyeVxuICogcGFyYW1ldGVycyBhbmQgZnJhZ21lbnRzIGFsc28gYXJlIHJlbW92ZWQuXG4gKlxuICogRm9yIGFuIEV4cG8taG9zdGVkIHByb2plY3Qgd2l0aCBhIG1hbmlmZXN0IGhvc3RlZCBhdCBodHRwczovL2V4cC5ob3N0L0B1c2VyL3Byb2plY3QvaW5kZXguZXhwLCB0aGVcbiAqIGJhc2UgVVJMIHdvdWxkIGJlIGh0dHBzOi8vZXhwLmhvc3QvQHVzZXIvcHJvamVjdC5cbiAqXG4gKiBXZSBhbHNvIG5vcm1hbGl6ZSB0aGUgXCJleHBcIiBwcm90b2NvbCB0byBcImh0dHBcIiB0byBoYW5kbGUgaW50ZXJuYWwgVVJMcyB3aXRoIHRoZSBFeHBvIHNjaGVtZXMgdXNlZFxuICogdG8gdGVsbCB0aGUgT1MgdG8gb3BlbiB0aGUgVVJMcyBpbiB0aGUgdGhlIEV4cG8gY2xpZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFuaWZlc3RCYXNlVXJsKG1hbmlmZXN0VXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCB1cmxPYmplY3QgPSBuZXcgVVJMKG1hbmlmZXN0VXJsLCB7fSk7XG5cbiAgLy8gQ2hhbmdlIHRoZSBzY2hlbWUgdG8gaHR0cChzKSBpZiBpdCBpcyBleHAocylcbiAgaWYgKHVybE9iamVjdC5wcm90b2NvbCA9PT0gJ2V4cDonKSB7XG4gICAgdXJsT2JqZWN0LnNldCgncHJvdG9jb2wnLCAnaHR0cDonKTtcbiAgfSBlbHNlIGlmICh1cmxPYmplY3QucHJvdG9jb2wgPT09ICdleHBzOicpIHtcbiAgICB1cmxPYmplY3Quc2V0KCdwcm90b2NvbCcsICdodHRwczonKTtcbiAgfVxuXG4gIC8vIFRyaW0gZmlsZW5hbWUsIHF1ZXJ5IHBhcmFtZXRlcnMsIGFuZCBmcmFnbWVudCwgaWYgYW55XG4gIGNvbnN0IGRpcmVjdG9yeSA9IHVybE9iamVjdC5wYXRobmFtZS5zdWJzdHJpbmcoMCwgdXJsT2JqZWN0LnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgdXJsT2JqZWN0LnNldCgncGF0aG5hbWUnLCBkaXJlY3RvcnkpO1xuICB1cmxPYmplY3Quc2V0KCdxdWVyeScsICcnKTtcbiAgdXJsT2JqZWN0LnNldCgnaGFzaCcsICcnKTtcblxuICByZXR1cm4gdXJsT2JqZWN0LmhyZWY7XG59XG4iXX0=