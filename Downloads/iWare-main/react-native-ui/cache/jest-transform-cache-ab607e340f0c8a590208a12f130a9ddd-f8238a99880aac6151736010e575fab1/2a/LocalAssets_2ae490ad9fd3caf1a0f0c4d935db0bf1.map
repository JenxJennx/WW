{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAGA,IAAMA,aAAa,GAAG,IAAIC,GAAJ,CAAQC,UAAU,CAACF,aAAX,IAA4B,EAApC,CAAtB;AAGA,IAAMG,WAAW,GAAG,oCAApB;;AAKM,SAAUC,gBAAV,CAA2BC,IAA3B,EAAyCC,IAAzC,EAA4D;EAChE,IAAMC,cAAc,GAAGF,IAAvB;EACA,IAAMG,oBAAoB,GAAMH,IAAN,UAAcC,IAAd,WAAcA,IAAd,GAAsB,EAAtB,CAA1B;;EAEA,QAAQ,IAAR;IACE,KAAKC,cAAc,IAAIJ,WAAvB;MAAoC;QAClC,OAAOA,WAAW,CAACI,cAAD,CAAlB;MACD;;IACD,KAAKC,oBAAoB,IAAIL,WAA7B;MAA0C;QAExC,OAAOA,WAAW,CAACK,oBAAD,CAAlB;MACD;;IACD,KAAK,CAACC,OAAN;MAAe;QAGb,IAAMC,SAAS,cAAYL,IAAZ,IAAmBC,IAAI,SAAOA,IAAP,GAAgB,EAAvC,CAAf;;QACA,IAAIK,uBAAUC,YAAV,KAA2B,YAA3B,IAA2C,CAACZ,aAAa,CAACa,GAAd,CAAkBH,SAAlB,CAAhD,EAA8E;UAC5E,OAAO,IAAP;QACD;;QACD,YAAUR,UAAU,CAACY,eAArB,GAAuCJ,SAAvC;MACD;;IACD;MACE,OAAO,IAAP;EAlBJ;AAoBD","names":["bundledAssets","Set","FileSystem","localAssets","getLocalAssetUri","hash","type","localAssetsKey","legacyLocalAssetsKey","__DEV__","assetName","Constants","appOwnership","has","bundleDirectory"],"sourceRoot":"","sources":["../src/LocalAssets.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\n\nimport { getLocalAssets } from './PlatformUtils';\n\n// Fast lookup check if assets are available in the local bundle in managed apps\nconst bundledAssets = new Set(FileSystem.bundledAssets || []);\n\n// localAssets are provided by the expo-updates module\nconst localAssets = getLocalAssets();\n\n/**\n * Returns the URI of a local asset from its hash, or null if the asset is not available locally\n */\nexport function getLocalAssetUri(hash: string, type: string | null): string | null {\n  const localAssetsKey = hash;\n  const legacyLocalAssetsKey = `${hash}.${type ?? ''}`;\n\n  switch (true) {\n    case localAssetsKey in localAssets: {\n      return localAssets[localAssetsKey];\n    }\n    case legacyLocalAssetsKey in localAssets: {\n      // legacy updates store assets with an extension\n      return localAssets[legacyLocalAssetsKey];\n    }\n    case !__DEV__: {\n      // check legacy location in case we're in Expo client/managed workflow\n      // TODO(eric): remove this once bundledAssets is no longer exported from FileSystem\n      const assetName = `asset_${hash}${type ? `.${type}` : ''}`;\n      if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n        return null;\n      }\n      return `${FileSystem.bundleDirectory}${assetName}`;\n    }\n    default:\n      return null;\n  }\n}\n"]}