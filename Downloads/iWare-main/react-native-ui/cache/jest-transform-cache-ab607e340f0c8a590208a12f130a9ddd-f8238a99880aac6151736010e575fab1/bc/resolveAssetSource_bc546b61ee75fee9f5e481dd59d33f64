e4edff24ef07b9359dcecd48f1c20b50
'use strict';

var AssetRegistry = require('@react-native/assets/registry');

var AssetSourceResolver = require("./AssetSourceResolver");

var _require = require("./AssetUtils"),
    pickScale = _require.pickScale;

var _customSourceTransformer, _serverURL, _scriptURL;

var _sourceCodeScriptURL;

function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    sourceCode = require("../NativeModules/specs/NativeSourceCode").default;
  }

  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
  return _sourceCodeScriptURL;
}

function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }

  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }

    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }

  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }

  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);

  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }

  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJwaWNrU2NhbGUiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0U291cmNlQ29kZVNjcmlwdFVSTCIsInNvdXJjZUNvZGUiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiU291cmNlQ29kZSIsImRlZmF1bHQiLCJnZXRDb25zdGFudHMiLCJzY3JpcHRVUkwiLCJnZXREZXZTZXJ2ZXJVUkwiLCJ1bmRlZmluZWQiLCJzb3VyY2VDb2RlU2NyaXB0VVJMIiwibWF0Y2giLCJfY29lcmNlTG9jYWxTY3JpcHRVUkwiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlcyIsImdldFNjcmlwdFVSTCIsInNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJzb3VyY2UiLCJhc3NldCIsImdldEFzc2V0QnlJRCIsInJlc29sdmVyIiwiZGVmYXVsdEFzc2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4vLyBSZXNvbHZlcyBhbiBhc3NldCBpbnRvIGEgYHNvdXJjZWAgZm9yIGBJbWFnZWAuXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXRSZWdpc3RyeSA9IHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUvYXNzZXRzL3JlZ2lzdHJ5Jyk7XG5jb25zdCBBc3NldFNvdXJjZVJlc29sdmVyID0gcmVxdWlyZSgnLi9Bc3NldFNvdXJjZVJlc29sdmVyJyk7XG5jb25zdCB7cGlja1NjYWxlfSA9IHJlcXVpcmUoJy4vQXNzZXRVdGlscycpO1xuXG5pbXBvcnQgdHlwZSB7UmVzb2x2ZWRBc3NldFNvdXJjZX0gZnJvbSAnLi9Bc3NldFNvdXJjZVJlc29sdmVyJztcblxubGV0IF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciwgX3NlcnZlclVSTCwgX3NjcmlwdFVSTDtcblxubGV0IF9zb3VyY2VDb2RlU2NyaXB0VVJMOiA/c3RyaW5nO1xuZnVuY3Rpb24gZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zb3VyY2VDb2RlU2NyaXB0VVJMKSB7XG4gICAgcmV0dXJuIF9zb3VyY2VDb2RlU2NyaXB0VVJMO1xuICB9XG5cbiAgbGV0IHNvdXJjZUNvZGUgPVxuICAgIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zICYmIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zLlNvdXJjZUNvZGU7XG4gIGlmICghc291cmNlQ29kZSkge1xuICAgIHNvdXJjZUNvZGUgPSByZXF1aXJlKCcuLi9OYXRpdmVNb2R1bGVzL3NwZWNzL05hdGl2ZVNvdXJjZUNvZGUnKS5kZWZhdWx0O1xuICB9XG4gIF9zb3VyY2VDb2RlU2NyaXB0VVJMID0gc291cmNlQ29kZS5nZXRDb25zdGFudHMoKS5zY3JpcHRVUkw7XG4gIHJldHVybiBfc291cmNlQ29kZVNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2U2VydmVyVVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NlcnZlclVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3Qgc291cmNlQ29kZVNjcmlwdFVSTCA9IGdldFNvdXJjZUNvZGVTY3JpcHRVUkwoKTtcbiAgICBjb25zdCBtYXRjaCA9XG4gICAgICBzb3VyY2VDb2RlU2NyaXB0VVJMICYmIHNvdXJjZUNvZGVTY3JpcHRVUkwubWF0Y2goL15odHRwcz86XFwvXFwvLio/XFwvLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gbmV0d29ya1xuICAgICAgX3NlcnZlclVSTCA9IG1hdGNoWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gZmlsZVxuICAgICAgX3NlcnZlclVSTCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBfc2VydmVyVVJMO1xufVxuXG5mdW5jdGlvbiBfY29lcmNlTG9jYWxTY3JpcHRVUkwoc2NyaXB0VVJMOiA/c3RyaW5nKTogP3N0cmluZyB7XG4gIGlmIChzY3JpcHRVUkwpIHtcbiAgICBpZiAoc2NyaXB0VVJMLnN0YXJ0c1dpdGgoJ2Fzc2V0czovLycpKSB7XG4gICAgICAvLyBhbmRyb2lkOiBydW5uaW5nIGZyb20gd2l0aGluIGFzc2V0cywgbm8gb2ZmbGluZSBwYXRoIHRvIHVzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHNjcmlwdFVSTCA9IHNjcmlwdFVSTC5zdWJzdHJpbmcoMCwgc2NyaXB0VVJMLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICBpZiAoIXNjcmlwdFVSTC5pbmNsdWRlcygnOi8vJykpIHtcbiAgICAgIC8vIEFkZCBmaWxlIHByb3RvY29sIGluIGNhc2Ugd2UgaGF2ZSBhbiBhYnNvbHV0ZSBmaWxlIHBhdGggYW5kIG5vdCBhIFVSTC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IHJlYWxseSBiZSBuZWNlc3NhcnkuIHNjcmlwdFVSTCBzaG91bGQgYmUgYSBVUkwuXG4gICAgICBzY3JpcHRVUkwgPSAnZmlsZTovLycgKyBzY3JpcHRVUkw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIGdldFNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zY3JpcHRVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIF9zY3JpcHRVUkwgPSBfY29lcmNlTG9jYWxTY3JpcHRVUkwoZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpKTtcbiAgfVxuICByZXR1cm4gX3NjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIoXG4gIHRyYW5zZm9ybWVyOiAocmVzb2x2ZXI6IEFzc2V0U291cmNlUmVzb2x2ZXIpID0+IFJlc29sdmVkQXNzZXRTb3VyY2UsXG4pOiB2b2lkIHtcbiAgX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG59XG5cbi8qKlxuICogYHNvdXJjZWAgaXMgZWl0aGVyIGEgbnVtYmVyIChvcGFxdWUgdHlwZSByZXR1cm5lZCBieSByZXF1aXJlKCcuL2Zvby5wbmcnKSlcbiAqIG9yIGFuIGBJbWFnZVNvdXJjZWAgbGlrZSB7IHVyaTogJzxodHRwIGxvY2F0aW9uIHx8IGZpbGUgcGF0aD4nIH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0U291cmNlKHNvdXJjZTogYW55KTogP1Jlc29sdmVkQXNzZXRTb3VyY2Uge1xuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgY29uc3QgYXNzZXQgPSBBc3NldFJlZ2lzdHJ5LmdldEFzc2V0QnlJRChzb3VyY2UpO1xuICBpZiAoIWFzc2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCByZXNvbHZlciA9IG5ldyBBc3NldFNvdXJjZVJlc29sdmVyKFxuICAgIGdldERldlNlcnZlclVSTCgpLFxuICAgIGdldFNjcmlwdFVSTCgpLFxuICAgIGFzc2V0LFxuICApO1xuICBpZiAoX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKSB7XG4gICAgcmV0dXJuIF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcihyZXNvbHZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVyLmRlZmF1bHRBc3NldCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVBc3NldFNvdXJjZTtcbm1vZHVsZS5leHBvcnRzLnBpY2tTY2FsZSA9IHBpY2tTY2FsZTtcbm1vZHVsZS5leHBvcnRzLnNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyID0gc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXI7XG4iXSwibWFwcGluZ3MiOiJBQVlBOztBQUVBLElBQU1BLGFBQWEsR0FBR0MsT0FBTyxDQUFDLCtCQUFELENBQTdCOztBQUNBLElBQU1DLG1CQUFtQixHQUFHRCxPQUFPLHlCQUFuQzs7QUFDQSxlQUFvQkEsT0FBTyxnQkFBM0I7QUFBQSxJQUFPRSxTQUFQLFlBQU9BLFNBQVA7O0FBSUEsSUFBSUMsd0JBQUosRUFBOEJDLFVBQTlCLEVBQTBDQyxVQUExQzs7QUFFQSxJQUFJQyxvQkFBSjs7QUFDQSxTQUFTQyxzQkFBVCxHQUEyQztFQUN6QyxJQUFJRCxvQkFBSixFQUEwQjtJQUN4QixPQUFPQSxvQkFBUDtFQUNEOztFQUVELElBQUlFLFVBQVUsR0FDWkMsTUFBTSxDQUFDQyxnQkFBUCxJQUEyQkQsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkMsVUFEckQ7O0VBRUEsSUFBSSxDQUFDSCxVQUFMLEVBQWlCO0lBQ2ZBLFVBQVUsR0FBR1IsT0FBTywyQ0FBUCxDQUFtRFksT0FBaEU7RUFDRDs7RUFDRE4sb0JBQW9CLEdBQUdFLFVBQVUsQ0FBQ0ssWUFBWCxHQUEwQkMsU0FBakQ7RUFDQSxPQUFPUixvQkFBUDtBQUNEOztBQUVELFNBQVNTLGVBQVQsR0FBb0M7RUFDbEMsSUFBSVgsVUFBVSxLQUFLWSxTQUFuQixFQUE4QjtJQUM1QixJQUFNQyxtQkFBbUIsR0FBR1Ysc0JBQXNCLEVBQWxEO0lBQ0EsSUFBTVcsS0FBSyxHQUNURCxtQkFBbUIsSUFBSUEsbUJBQW1CLENBQUNDLEtBQXBCLENBQTBCLG1CQUExQixDQUR6Qjs7SUFFQSxJQUFJQSxLQUFKLEVBQVc7TUFFVGQsVUFBVSxHQUFHYyxLQUFLLENBQUMsQ0FBRCxDQUFsQjtJQUNELENBSEQsTUFHTztNQUVMZCxVQUFVLEdBQUcsSUFBYjtJQUNEO0VBQ0Y7O0VBQ0QsT0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQVNlLHFCQUFULENBQStCTCxTQUEvQixFQUE0RDtFQUMxRCxJQUFJQSxTQUFKLEVBQWU7SUFDYixJQUFJQSxTQUFTLENBQUNNLFVBQVYsQ0FBcUIsV0FBckIsQ0FBSixFQUF1QztNQUVyQyxPQUFPLElBQVA7SUFDRDs7SUFDRE4sU0FBUyxHQUFHQSxTQUFTLENBQUNPLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUJQLFNBQVMsQ0FBQ1EsV0FBVixDQUFzQixHQUF0QixJQUE2QixDQUFwRCxDQUFaOztJQUNBLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxRQUFWLENBQW1CLEtBQW5CLENBQUwsRUFBZ0M7TUFHOUJULFNBQVMsR0FBRyxZQUFZQSxTQUF4QjtJQUNEO0VBQ0Y7O0VBQ0QsT0FBT0EsU0FBUDtBQUNEOztBQUVELFNBQVNVLFlBQVQsR0FBaUM7RUFDL0IsSUFBSW5CLFVBQVUsS0FBS1csU0FBbkIsRUFBOEI7SUFDNUJYLFVBQVUsR0FBR2MscUJBQXFCLENBQUNaLHNCQUFzQixFQUF2QixDQUFsQztFQUNEOztFQUNELE9BQU9GLFVBQVA7QUFDRDs7QUFFRCxTQUFTb0IsMEJBQVQsQ0FDRUMsV0FERixFQUVRO0VBQ052Qix3QkFBd0IsR0FBR3VCLFdBQTNCO0FBQ0Q7O0FBTUQsU0FBU0Msa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQStEO0VBQzdELElBQUksT0FBT0EsTUFBUCxLQUFrQixRQUF0QixFQUFnQztJQUM5QixPQUFPQSxNQUFQO0VBQ0Q7O0VBRUQsSUFBTUMsS0FBSyxHQUFHOUIsYUFBYSxDQUFDK0IsWUFBZCxDQUEyQkYsTUFBM0IsQ0FBZDs7RUFDQSxJQUFJLENBQUNDLEtBQUwsRUFBWTtJQUNWLE9BQU8sSUFBUDtFQUNEOztFQUVELElBQU1FLFFBQVEsR0FBRyxJQUFJOUIsbUJBQUosQ0FDZmMsZUFBZSxFQURBLEVBRWZTLFlBQVksRUFGRyxFQUdmSyxLQUhlLENBQWpCOztFQUtBLElBQUkxQix3QkFBSixFQUE4QjtJQUM1QixPQUFPQSx3QkFBd0IsQ0FBQzRCLFFBQUQsQ0FBL0I7RUFDRDs7RUFDRCxPQUFPQSxRQUFRLENBQUNDLFlBQVQsRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLGtCQUFqQjtBQUNBTSxNQUFNLENBQUNDLE9BQVAsQ0FBZWhDLFNBQWYsR0FBMkJBLFNBQTNCO0FBQ0ErQixNQUFNLENBQUNDLE9BQVAsQ0FBZVQsMEJBQWYsR0FBNENBLDBCQUE1QyJ9