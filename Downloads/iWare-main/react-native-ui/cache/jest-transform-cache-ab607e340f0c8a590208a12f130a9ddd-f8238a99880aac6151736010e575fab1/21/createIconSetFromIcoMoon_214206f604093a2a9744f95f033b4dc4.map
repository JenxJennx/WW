{"version":3,"mappings":";;;;;;;AAAA;;AAEc,kBAAWA,MAAX,EAAmBC,YAAnB,EAAiCC,WAAjC,EAA4C;EACxD,IAAMC,QAAQ,GAAG,EAAjB;EACAH,MAAM,CAACI,KAAP,CAAaC,OAAb,CAAqB,cAAI,EAAG;IAC1BC,IAAI,CAACC,UAAL,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,UAA3B,EAAuCJ,OAAvC,CAA+C,cAAI,EAAG;MACpDF,QAAQ,CAACK,IAAD,CAAR,GAAiBF,IAAI,CAACC,UAAL,CAAgBG,IAAjC;IACD,CAFD;EAGD,CAJD;EAMA,IAAMC,UAAU,GACdV,YAAY,IAAID,MAAM,CAACY,WAAP,CAAmBC,QAAnB,CAA4BC,QAA5B,CAAqCH,UADvD;EAGA,OAAO,4BACLR,QADK,EAELQ,UAFK,EAGLT,WAAW,IAAOS,UAAP,SAHN,CAAP;AAKD","names":["config","expoFontName","expoAssetId","glyphMap","icons","forEach","icon","properties","name","split","code","fontFamily","preferences","fontPref","metadata"],"sourceRoot":"","sources":["../src/createIconSetFromIcoMoon.ts"],"sourcesContent":["import createIconSet from \"./createIconSet\";\n\nexport default function (config, expoFontName, expoAssetId) {\n  const glyphMap = {};\n  config.icons.forEach(icon => {\n    icon.properties.name.split(/\\s*,\\s*/g).forEach(name => {\n      glyphMap[name] = icon.properties.code;\n    });\n  });\n\n  const fontFamily =\n    expoFontName || config.preferences.fontPref.metadata.fontFamily;\n\n  return createIconSet<string, string>(\n    glyphMap,\n    fontFamily,\n    expoAssetId || `${fontFamily}.ttf`\n  );\n}\n"]}