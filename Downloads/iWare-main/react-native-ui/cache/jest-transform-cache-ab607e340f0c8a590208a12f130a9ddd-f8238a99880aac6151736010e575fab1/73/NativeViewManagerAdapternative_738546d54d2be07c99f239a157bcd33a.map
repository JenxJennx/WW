{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;AAkBM,SAAUA,wBAAV,CAA4CC,QAA5C,EAA4D;EAAA;;EAChE,IAAQC,oBAAR,GAAiCC,2BAAcC,oBAA/C,CAAQF,oBAAR;EACA,IAAMG,iBAAiB,GAAGH,oBAAH,oBAAGA,oBAAoB,CAAGD,QAAH,CAA9C;;EAEA,IAAIK,OAAO,IAAI,CAACD,iBAAhB,EAAmC;IACjC,IAAME,wBAAwB,GAAGC,MAAM,CAACC,IAAP,CAAYP,oBAAZ,EAAkCQ,IAAlC,CAAuC,IAAvC,CAAjC;IACAC,OAAO,CAACC,IAAR,gDAC+CX,QAD/C,mJACqMM,wBADrM;EAGD;;EAID,IAAMM,mBAAmB,2BAAyBZ,QAAlD;EACA,IAAMa,oBAAoB,GACxB,yCAAiDD,mBAAjD,CADF;EAEA,IAAME,iBAAiB,4BAAGV,iBAAH,oBAAGA,iBAAiB,CAAEW,UAAtB,oCAAoC,EAA3D;;EAGA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuCC,GAAvC,EAA0C;IACxC,IAAMC,WAAW,GAAGC,IAAI,CAACH,KAAD,EAAQH,iBAAR,CAAxB;IACA,IAAMO,YAAY,GAAGC,IAAI,CAACL,KAAD,EAAQH,iBAAR,CAAzB;IACA,OAAOS,6BAACV,oBAAD,kCAA0BM,WAA1B;MAAuCK,iBAAiB,EAAEH,YAA1D;MAAwEH,GAAG,EAAEA;IAA7E,GAAP;EACD;;EACDF,sBAAsB,CAACS,WAAvB,gBAAgDzB,QAAhD;EACA,OAAOuB,eAAMG,UAAN,CAAiBV,sBAAjB,CAAP;AACD;;AAED,SAASI,IAAT,CAAcH,KAAd,EAA0CU,SAA1C,EAA6D;EAC3D,IAAMC,MAAM,qBAAQX,KAAR,CAAZ;;EACA,qDAAuBU,SAAvB,wCAAkC;IAAA,IAAvBE,QAAuB;IAChC,OAAOD,MAAM,CAACC,QAAD,CAAb;EACD;;EACD,OAAOD,MAAP;AACD;;AAED,SAASN,IAAT,CAAcL,KAAd,EAA0CU,SAA1C,EAA6D;EAC3D,OAAOA,SAAS,CAACG,MAAV,CAAiB,UAACC,IAAD,EAAOC,IAAP,EAAe;IACrC,IAAIA,IAAI,IAAIf,KAAZ,EAAmB;MACjBc,IAAI,CAACC,IAAD,CAAJ,GAAaf,KAAK,CAACe,IAAD,CAAlB;IACD;;IACD,OAAOD,IAAP;EACD,CALM,EAKJ,EALI,CAAP;AAMD","names":["requireNativeViewManager","viewName","viewManagersMetadata","NativeModules","NativeUnimoduleProxy","viewManagerConfig","__DEV__","exportedViewManagerNames","Object","keys","join","console","warn","reactNativeViewName","ReactNativeComponent","proxiedPropsNames","propsNames","NativeComponentAdapter","props","ref","nativeProps","omit","proxiedProps","pick","React","proxiedProperties","displayName","forwardRef","propNames","copied","propName","reduce","prev","curr"],"sourceRoot":"","sources":["../src/NativeViewManagerAdapter.native.tsx"],"sourcesContent":["import React from 'react';\nimport { NativeModules, requireNativeComponent } from 'react-native';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\ntype NativeExpoComponentProps = {\n  proxiedProperties: object;\n};\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P = any>(viewName: string): React.ComponentType<P> {\n  const { viewManagersMetadata } = NativeModules.NativeUnimoduleProxy;\n  const viewManagerConfig = viewManagersMetadata?.[viewName];\n\n  if (__DEV__ && !viewManagerConfig) {\n    const exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(\n      `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n    );\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent =\n    requireNativeComponent<NativeExpoComponentProps>(reactNativeViewName);\n  const proxiedPropsNames = viewManagerConfig?.propsNames ?? [];\n\n  // Define a component for universal-module authors to access their native view manager\n  function NativeComponentAdapter(props, ref) {\n    const nativeProps = omit(props, proxiedPropsNames);\n    const proxiedProps = pick(props, proxiedPropsNames);\n    return <ReactNativeComponent {...nativeProps} proxiedProperties={proxiedProps} ref={ref} />;\n  }\n  NativeComponentAdapter.displayName = `Adapter<${viewName}>`;\n  return React.forwardRef(NativeComponentAdapter);\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nfunction pick(props: Record<string, any>, propNames: string[]) {\n  return propNames.reduce((prev, curr) => {\n    if (curr in props) {\n      prev[curr] = props[curr];\n    }\n    return prev;\n  }, {});\n}\n"]}