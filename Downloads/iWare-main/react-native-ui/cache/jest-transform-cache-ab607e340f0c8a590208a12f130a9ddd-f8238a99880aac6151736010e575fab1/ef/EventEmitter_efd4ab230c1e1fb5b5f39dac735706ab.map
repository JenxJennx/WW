{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,4BAA4B,GAAG,+BAArC;;IAiBaC,Y;EAKX,sBAAYC,YAAZ,EAAsC;IAAA;IAAA,KAJtCC,cAIsC,GAJrB,CAIqB;IACpC,KAAKC,aAAL,GAAqBF,YAArB;IACA,KAAKG,aAAL,GAAqB,IAAIC,+BAAJ,CAAuBJ,YAAvB,CAArB;EACD;;;;WAED,qBAAeK,SAAf,EAAkCC,QAAlC,EAA8D;MAAA;MAAA;;MAC5D,IAAI,CAAC,KAAKL,cAAN,IAAwBM,sBAASC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBO,cAAxE,EAAwF;QACtF,KAAKP,aAAL,CAAmBO,cAAnB;MACD;;MAED,KAAKR,cAAL;;MACA,IAAMS,yBAAyB,GAAG,KAAKP,aAAL,CAAmBQ,WAAnB,CAA+BN,SAA/B,EAA0CC,QAA1C,CAAlC;;MACA,IAAMM,YAAY,qEACfd,4BADe,EACgBY,yBADhB,0DAER,kBAAK;QACX,KAAI,CAACG,kBAAL,CAAwBD,YAAxB;MACD,CAJe,iBAAlB;MAMA,OAAOA,YAAP;IACD;;;WAED,4BAAmBP,SAAnB,EAAoC;MAElC,IAAMS,oBAAoB,GAAG,KAAKX,aAAL,CAAmBY,aAAnB,GAEzB,KAAKZ,aAAL,CAAmBY,aAAnB,CAAiCV,SAAjC,CAFyB,GAIzB,KAAKF,aAAL,CAAmBa,SAAnB,CAA6BX,SAA7B,EAAwCY,MAJ5C;;MAKA,KAAKd,aAAL,CAAmBe,kBAAnB,CAAsCb,SAAtC;;MACA,KAAKJ,cAAL,IAAuBa,oBAAvB;MACA,wBACE,KAAKb,cAAL,IAAuB,CADzB;;MAKA,IAAI,CAAC,KAAKA,cAAN,IAAwBM,sBAASC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBiB,aAAxE,EAAuF;QACrF,KAAKjB,aAAL,CAAmBiB,aAAnB;MACD;IACF;;;WAED,4BAAmBP,YAAnB,EAA6C;MAC3C,IAAMF,yBAAyB,GAAGE,YAAY,CAACd,4BAAD,CAA9C;;MACA,IAAI,CAACY,yBAAL,EAAgC;QAC9B;MACD;;MAED,IAAI,YAAYA,yBAAhB,EAA2C;QAEzCA,yBAAyB,CAACU,MAA1B;MACD,CAHD,MAGO,IAAI,wBAAwB,KAAKjB,aAAjC,EAAgD;QACrD,KAAKA,aAAL,CAAmBU,kBAAnB,CAAsCH,yBAAtC;MACD;;MACD,KAAKT,cAAL;MAIA,OAAOW,YAAY,CAACd,4BAAD,CAAnB;;MAGAc,YAAY,CAACQ,MAAb,GAAsB,YAAK,CAAG,CAA9B;;MAEA,IAAI,CAAC,KAAKnB,cAAN,IAAwBM,sBAASC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBiB,aAAxE,EAAuF;QACrF,KAAKjB,aAAL,CAAmBiB,aAAnB;MACD;IACF;;;WAED,cAAKd,SAAL,EAAwC;MAAA;;MAAA,kCAAbgB,MAAa;QAAbA,MAAa;MAAA;;MACtC,4BAAKlB,aAAL,EAAmBmB,IAAnB,6BAAwBjB,SAAxB,SAAsCgB,MAAtC;IACD","names":["nativeEmitterSubscriptionKey","EventEmitter","nativeModule","_listenerCount","_nativeModule","_eventEmitter","NativeEventEmitter","eventName","listener","Platform","OS","startObserving","nativeEmitterSubscription","addListener","subscription","removeSubscription","removedListenerCount","listenerCount","listeners","length","removeAllListeners","stopObserving","remove","params","emit"],"sourceRoot":"","sources":["../src/EventEmitter.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"]}