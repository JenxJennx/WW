db0c59886d5f2d5ac5533b82c7b2d7e1
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var NativeProxy = _reactNative.NativeModules.NativeUnimoduleProxy;
var modulesConstantsKey = 'modulesConstants';
var exportedMethodsKey = 'exportedMethods';
var NativeModulesProxy = {};

if (NativeProxy) {
  Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {
    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};
    NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {
      NativeModulesProxy[moduleName][methodInfo.name] = function () {
        var key = methodInfo.key,
            argumentsCount = methodInfo.argumentsCount;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (argumentsCount !== args.length) {
          return Promise.reject(new Error("Native method " + moduleName + "." + methodInfo.name + " expects " + argumentsCount + " " + (argumentsCount === 1 ? 'argument' : 'arguments') + " but received " + args.length));
        }

        return NativeProxy.callMethod(moduleName, key, args);
      };
    });

    if (_reactNative.NativeModules.EXReactNativeEventEmitter) {
      NativeModulesProxy[moduleName].addListener = function () {
        var _NativeModules$EXReac;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return (_NativeModules$EXReac = _reactNative.NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac, [moduleName].concat(args));
      };

      NativeModulesProxy[moduleName].removeListeners = function () {
        var _NativeModules$EXReac2;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return (_NativeModules$EXReac2 = _reactNative.NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2, [moduleName].concat(args));
      };
    } else {
      NativeModulesProxy[moduleName].addListener = function () {};

      NativeModulesProxy[moduleName].removeListeners = function () {};
    }
  });
} else {
  console.warn("The \"EXNativeModulesProxy\" native module is not exported through NativeModules; verify that expo-modules-core's native code is linked properly");
}

var _default = NativeModulesProxy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFJQSxJQUFNQSxXQUFXLEdBQUdDLDJCQUFjQyxvQkFBbEM7QUFDQSxJQUFNQyxtQkFBbUIsR0FBRyxrQkFBNUI7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxpQkFBM0I7QUFFQSxJQUFNQyxrQkFBa0IsR0FBZ0QsRUFBeEU7O0FBRUEsSUFBSUwsV0FBSixFQUFpQjtFQUNmTSxNQUFNLENBQUNDLElBQVAsQ0FBWVAsV0FBVyxDQUFDSSxrQkFBRCxDQUF2QixFQUE2Q0ksT0FBN0MsQ0FBcUQsVUFBQ0MsVUFBRCxFQUFlO0lBQ2xFSixrQkFBa0IsQ0FBQ0ksVUFBRCxDQUFsQixHQUFpQ1QsV0FBVyxDQUFDRyxtQkFBRCxDQUFYLENBQWlDTSxVQUFqQyxLQUFnRCxFQUFqRjtJQUNBVCxXQUFXLENBQUNJLGtCQUFELENBQVgsQ0FBZ0NLLFVBQWhDLEVBQTRDRCxPQUE1QyxDQUFvRCxVQUFDRSxVQUFELEVBQWU7TUFDakVMLGtCQUFrQixDQUFDSSxVQUFELENBQWxCLENBQStCQyxVQUFVLENBQUNDLElBQTFDLElBQWtELFlBQXFDO1FBQ3JGLElBQVFDLEdBQVIsR0FBZ0NGLFVBQWhDLENBQVFFLEdBQVI7UUFBQSxJQUFhQyxjQUFiLEdBQWdDSCxVQUFoQyxDQUFhRyxjQUFiOztRQURxRixrQ0FBakNDLElBQWlDO1VBQWpDQSxJQUFpQztRQUFBOztRQUVyRixJQUFJRCxjQUFjLEtBQUtDLElBQUksQ0FBQ0MsTUFBNUIsRUFBb0M7VUFDbEMsT0FBT0MsT0FBTyxDQUFDQyxNQUFSLENBQ0wsSUFBSUMsS0FBSixvQkFDbUJULFVBRG5CLFNBQ2lDQyxVQUFVLENBQUNDLElBRDVDLGlCQUM0REUsY0FENUQsVUFFSUEsY0FBYyxLQUFLLENBQW5CLEdBQXVCLFVBQXZCLEdBQW9DLFdBRnhDLHVCQUdtQkMsSUFBSSxDQUFDQyxNQUh4QixDQURLLENBQVA7UUFPRDs7UUFDRCxPQUFPZixXQUFXLENBQUNtQixVQUFaLENBQXVCVixVQUF2QixFQUFtQ0csR0FBbkMsRUFBd0NFLElBQXhDLENBQVA7TUFDRCxDQVpEO0lBYUQsQ0FkRDs7SUEwQkEsSUFBSWIsMkJBQWNtQix5QkFBbEIsRUFBNkM7TUFDM0NmLGtCQUFrQixDQUFDSSxVQUFELENBQWxCLENBQStCWSxXQUEvQixHQUE2QztRQUFBOztRQUFBLG1DQUFJUCxJQUFKO1VBQUlBLElBQUo7UUFBQTs7UUFBQSxPQUMzQyxvREFBY00seUJBQWQsRUFBd0NFLGtCQUF4QywrQkFBMkRiLFVBQTNELFNBQTBFSyxJQUExRSxFQUQyQztNQUFBLENBQTdDOztNQUVBVCxrQkFBa0IsQ0FBQ0ksVUFBRCxDQUFsQixDQUErQmMsZUFBL0IsR0FBaUQ7UUFBQTs7UUFBQSxtQ0FBSVQsSUFBSjtVQUFJQSxJQUFKO1FBQUE7O1FBQUEsT0FDL0MscURBQWNNLHlCQUFkLEVBQXdDSSxzQkFBeEMsZ0NBQStEZixVQUEvRCxTQUE4RUssSUFBOUUsRUFEK0M7TUFBQSxDQUFqRDtJQUVELENBTEQsTUFLTztNQUlMVCxrQkFBa0IsQ0FBQ0ksVUFBRCxDQUFsQixDQUErQlksV0FBL0IsR0FBNkMsWUFBSyxDQUFHLENBQXJEOztNQUNBaEIsa0JBQWtCLENBQUNJLFVBQUQsQ0FBbEIsQ0FBK0JjLGVBQS9CLEdBQWlELFlBQUssQ0FBRyxDQUF6RDtJQUNEO0VBQ0YsQ0F4Q0Q7QUF5Q0QsQ0ExQ0QsTUEwQ087RUFDTEUsT0FBTyxDQUFDQyxJQUFSO0FBR0Q7O2VBRWNyQixrQiIsIm5hbWVzIjpbIk5hdGl2ZVByb3h5IiwiTmF0aXZlTW9kdWxlcyIsIk5hdGl2ZVVuaW1vZHVsZVByb3h5IiwibW9kdWxlc0NvbnN0YW50c0tleSIsImV4cG9ydGVkTWV0aG9kc0tleSIsIk5hdGl2ZU1vZHVsZXNQcm94eSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibW9kdWxlTmFtZSIsIm1ldGhvZEluZm8iLCJuYW1lIiwia2V5IiwiYXJndW1lbnRzQ291bnQiLCJhcmdzIiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiY2FsbE1ldGhvZCIsIkVYUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImFkZFByb3hpZWRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVycyIsInJlbW92ZVByb3hpZWRMaXN0ZW5lcnMiLCJjb25zb2xlIiwid2FybiJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTmF0aXZlTW9kdWxlc1Byb3h5Lm5hdGl2ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgUHJveHlOYXRpdmVNb2R1bGUgfSBmcm9tICcuL05hdGl2ZU1vZHVsZXNQcm94eS50eXBlcyc7XG5cbmNvbnN0IE5hdGl2ZVByb3h5ID0gTmF0aXZlTW9kdWxlcy5OYXRpdmVVbmltb2R1bGVQcm94eTtcbmNvbnN0IG1vZHVsZXNDb25zdGFudHNLZXkgPSAnbW9kdWxlc0NvbnN0YW50cyc7XG5jb25zdCBleHBvcnRlZE1ldGhvZHNLZXkgPSAnZXhwb3J0ZWRNZXRob2RzJztcblxuY29uc3QgTmF0aXZlTW9kdWxlc1Byb3h5OiB7IFttb2R1bGVOYW1lOiBzdHJpbmddOiBQcm94eU5hdGl2ZU1vZHVsZSB9ID0ge307XG5cbmlmIChOYXRpdmVQcm94eSkge1xuICBPYmplY3Qua2V5cyhOYXRpdmVQcm94eVtleHBvcnRlZE1ldGhvZHNLZXldKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgTmF0aXZlTW9kdWxlc1Byb3h5W21vZHVsZU5hbWVdID0gTmF0aXZlUHJveHlbbW9kdWxlc0NvbnN0YW50c0tleV1bbW9kdWxlTmFtZV0gfHwge307XG4gICAgTmF0aXZlUHJveHlbZXhwb3J0ZWRNZXRob2RzS2V5XVttb2R1bGVOYW1lXS5mb3JFYWNoKChtZXRob2RJbmZvKSA9PiB7XG4gICAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV1bbWV0aG9kSW5mby5uYW1lXSA9ICguLi5hcmdzOiB1bmtub3duW10pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgICBjb25zdCB7IGtleSwgYXJndW1lbnRzQ291bnQgfSA9IG1ldGhvZEluZm87XG4gICAgICAgIGlmIChhcmd1bWVudHNDb3VudCAhPT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBOYXRpdmUgbWV0aG9kICR7bW9kdWxlTmFtZX0uJHttZXRob2RJbmZvLm5hbWV9IGV4cGVjdHMgJHthcmd1bWVudHNDb3VudH0gJHtcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNDb3VudCA9PT0gMSA/ICdhcmd1bWVudCcgOiAnYXJndW1lbnRzJ1xuICAgICAgICAgICAgICB9IGJ1dCByZWNlaXZlZCAke2FyZ3MubGVuZ3RofWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOYXRpdmVQcm94eS5jYWxsTWV0aG9kKG1vZHVsZU5hbWUsIGtleSwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gVGhlc2UgYXJlIGNhbGxlZCBieSBFdmVudEVtaXR0ZXIgKHdoaWNoIGlzIGEgd3JhcHBlciBmb3IgTmF0aXZlRXZlbnRFbWl0dGVyKVxuICAgIC8vIG9ubHkgb24gaU9TIGFuZCB0aGV5IHVzZSBpT1Mtc3BlY2lmaWMgbmF0aXZlIG1vZHVsZSwgRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5cbiAgICAvL1xuICAgIC8vIE9uIEFuZHJvaWQgb25seSB7c3RhcnQsc3RvcH1PYnNlcnZpbmcgYXJlIGNhbGxlZCBvbiB0aGUgbmF0aXZlIG1vZHVsZVxuICAgIC8vIGFuZCB0aGVzZSBzaG91bGQgYmUgZXhwb3J0ZWQgYXMgRXhwbyBtZXRob2RzLlxuICAgIC8vXG4gICAgLy8gQmVmb3JlIHRoZSBSTiA2NSwgYWRkTGlzdGVuZXIvcmVtb3ZlTGlzdGVuZXJzIHdlcmVuJ3QgY2FsbGVkIG9uIEFuZHJvaWQuIEhvd2V2ZXIsIGl0IG5vIGxvbmdlciBzdGF5cyB0cnVlLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2NvbW1pdC9mNTUwMmZiZGE5ZmUyNzFmZjZlMWQwZGE3NzNhM2E4ZWUyMDZhNDUzLlxuICAgIC8vIFRoYXQncyB3aHksIHdlIGNoZWNrIGlmIHRoZSBgRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlcmAgZXhpc3RzIGFuZCBvbmx5IGlmIHllcywgd2UgdXNlIGl0IGluIHRoZSBsaXN0ZW5lciBpbXBsZW1lbnRhdGlvbi5cbiAgICAvLyBPdGhlcndpc2UsIHRob3NlIG1ldGhvZHMgYXJlIE5PT1AuXG4gICAgaWYgKE5hdGl2ZU1vZHVsZXMuRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlcikge1xuICAgICAgTmF0aXZlTW9kdWxlc1Byb3h5W21vZHVsZU5hbWVdLmFkZExpc3RlbmVyID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIE5hdGl2ZU1vZHVsZXMuRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5hZGRQcm94aWVkTGlzdGVuZXIobW9kdWxlTmFtZSwgLi4uYXJncyk7XG4gICAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV0ucmVtb3ZlTGlzdGVuZXJzID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIE5hdGl2ZU1vZHVsZXMuRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5yZW1vdmVQcm94aWVkTGlzdGVuZXJzKG1vZHVsZU5hbWUsIC4uLmFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaXhlcyBvbiBBbmRyb2lkOlxuICAgICAgLy8gV0FSTiAgYG5ldyBOYXRpdmVFdmVudEVtaXR0ZXIoKWAgd2FzIGNhbGxlZCB3aXRoIGEgbm9uLW51bGwgYXJndW1lbnQgd2l0aG91dCB0aGUgcmVxdWlyZWQgYGFkZExpc3RlbmVyYCBtZXRob2QuXG4gICAgICAvLyBXQVJOICBgbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcigpYCB3YXMgY2FsbGVkIHdpdGggYSBub24tbnVsbCBhcmd1bWVudCB3aXRob3V0IHRoZSByZXF1aXJlZCBgcmVtb3ZlTGlzdGVuZXJzYCBtZXRob2QuXG4gICAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV0uYWRkTGlzdGVuZXIgPSAoKSA9PiB7fTtcbiAgICAgIE5hdGl2ZU1vZHVsZXNQcm94eVttb2R1bGVOYW1lXS5yZW1vdmVMaXN0ZW5lcnMgPSAoKSA9PiB7fTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgY29uc29sZS53YXJuKFxuICAgIGBUaGUgXCJFWE5hdGl2ZU1vZHVsZXNQcm94eVwiIG5hdGl2ZSBtb2R1bGUgaXMgbm90IGV4cG9ydGVkIHRocm91Z2ggTmF0aXZlTW9kdWxlczsgdmVyaWZ5IHRoYXQgZXhwby1tb2R1bGVzLWNvcmUncyBuYXRpdmUgY29kZSBpcyBsaW5rZWQgcHJvcGVybHlgXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZU1vZHVsZXNQcm94eTtcbiJdfQ==