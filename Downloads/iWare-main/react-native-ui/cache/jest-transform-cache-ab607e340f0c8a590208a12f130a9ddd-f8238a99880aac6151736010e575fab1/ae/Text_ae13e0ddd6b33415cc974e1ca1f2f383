5b8791d57b337987f7a48951adf10930
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextElement = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var TextElement = function TextElement(props) {
  var _a;

  var style = props.style,
      theme = props.theme,
      _props$children = props.children,
      children = _props$children === void 0 ? '' : _props$children,
      h1 = props.h1,
      h2 = props.h2,
      h3 = props.h3,
      h4 = props.h4,
      h1Style = props.h1Style,
      h2Style = props.h2Style,
      h3Style = props.h3Style,
      h4Style = props.h4Style,
      rest = __rest(props, ["style", "theme", "children", "h1", "h2", "h3", "h4", "h1Style", "h2Style", "h3Style", "h4Style"]);

  return (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({
    style: _reactNative.StyleSheet.flatten([(0, _extends2.default)((0, _extends2.default)({}, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.regular)
    })), {
      color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.black
    }), style, (h1 || h2 || h3 || h4) && styles.bold, h1 && _reactNative.StyleSheet.flatten([{
      fontSize: (0, _normalizeText.default)(40)
    }, h1Style]), h2 && _reactNative.StyleSheet.flatten([{
      fontSize: (0, _normalizeText.default)(34)
    }, h2Style]), h3 && _reactNative.StyleSheet.flatten([{
      fontSize: (0, _normalizeText.default)(28)
    }, h3Style]), h4 && _reactNative.StyleSheet.flatten([{
      fontSize: (0, _normalizeText.default)(22)
    }, h4Style])])
  }, (0, _helpers.patchWebProps)(rest)), {}, {
    children: children
  }));
};

exports.TextElement = TextElement;
TextElement.defaultProps = {
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  style: {},
  h1Style: {},
  h2Style: {},
  h3Style: {},
  h4Style: {}
};

var styles = _reactNative.StyleSheet.create({
  bold: (0, _extends2.default)({}, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _config.fonts.android.bold)
  }))
});

var _default = (0, _config.withTheme)(TextElement, 'Text');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlRleHRFbGVtZW50IiwicHJvcHMiLCJfYSIsInN0eWxlIiwidGhlbWUiLCJjaGlsZHJlbiIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDFTdHlsZSIsImgyU3R5bGUiLCJoM1N0eWxlIiwiaDRTdHlsZSIsInJlc3QiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImZvbnRzIiwicmVndWxhciIsImNvbG9yIiwiY29sb3JzIiwiYmxhY2siLCJzdHlsZXMiLCJib2xkIiwiZm9udFNpemUiLCJub3JtYWxpemUiLCJwYXRjaFdlYlByb3BzIiwiZGVmYXVsdFByb3BzIiwiY3JlYXRlIiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiVGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGV4dCwgU3R5bGVTaGVldCwgUGxhdGZvcm0sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IGZvbnRzLCB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgcGF0Y2hXZWJQcm9wcyB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IG5vcm1hbGl6ZSBmcm9tICcuLi9oZWxwZXJzL25vcm1hbGl6ZVRleHQnO1xuY29uc3QgVGV4dEVsZW1lbnQgPSAocHJvcHMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBzdHlsZSwgdGhlbWUsIGNoaWxkcmVuID0gJycsIGgxLCBoMiwgaDMsIGg0LCBoMVN0eWxlLCBoMlN0eWxlLCBoM1N0eWxlLCBoNFN0eWxlIH0gPSBwcm9wcywgcmVzdCA9IF9fcmVzdChwcm9wcywgW1wic3R5bGVcIiwgXCJ0aGVtZVwiLCBcImNoaWxkcmVuXCIsIFwiaDFcIiwgXCJoMlwiLCBcImgzXCIsIFwiaDRcIiwgXCJoMVN0eWxlXCIsIFwiaDJTdHlsZVwiLCBcImgzU3R5bGVcIiwgXCJoNFN0eWxlXCJdKTtcbiAgICByZXR1cm4gKDxUZXh0IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgICAgICBhbmRyb2lkOiBPYmplY3QuYXNzaWduKHt9LCBmb250cy5hbmRyb2lkLnJlZ3VsYXIpLFxuICAgICAgICB9KSksIHsgY29sb3I6IChfYSA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ibGFjayB9KSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIChoMSB8fCBoMiB8fCBoMyB8fCBoNCkgJiYgc3R5bGVzLmJvbGQsXG4gICAgICAgIGgxICYmIFN0eWxlU2hlZXQuZmxhdHRlbihbeyBmb250U2l6ZTogbm9ybWFsaXplKDQwKSB9LCBoMVN0eWxlXSksXG4gICAgICAgIGgyICYmIFN0eWxlU2hlZXQuZmxhdHRlbihbeyBmb250U2l6ZTogbm9ybWFsaXplKDM0KSB9LCBoMlN0eWxlXSksXG4gICAgICAgIGgzICYmIFN0eWxlU2hlZXQuZmxhdHRlbihbeyBmb250U2l6ZTogbm9ybWFsaXplKDI4KSB9LCBoM1N0eWxlXSksXG4gICAgICAgIGg0ICYmIFN0eWxlU2hlZXQuZmxhdHRlbihbeyBmb250U2l6ZTogbm9ybWFsaXplKDIyKSB9LCBoNFN0eWxlXSksXG4gICAgXSl9IHsuLi5wYXRjaFdlYlByb3BzKHJlc3QpfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1RleHQ+KTtcbn07XG5UZXh0RWxlbWVudC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaDE6IGZhbHNlLFxuICAgIGgyOiBmYWxzZSxcbiAgICBoMzogZmFsc2UsXG4gICAgaDQ6IGZhbHNlLFxuICAgIHN0eWxlOiB7fSxcbiAgICBoMVN0eWxlOiB7fSxcbiAgICBoMlN0eWxlOiB7fSxcbiAgICBoM1N0eWxlOiB7fSxcbiAgICBoNFN0eWxlOiB7fSxcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgYm9sZDogT2JqZWN0LmFzc2lnbih7fSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgYW5kcm9pZDogT2JqZWN0LmFzc2lnbih7fSwgZm9udHMuYW5kcm9pZC5ib2xkKSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCB7IFRleHRFbGVtZW50IH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoVGV4dEVsZW1lbnQsICdUZXh0Jyk7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