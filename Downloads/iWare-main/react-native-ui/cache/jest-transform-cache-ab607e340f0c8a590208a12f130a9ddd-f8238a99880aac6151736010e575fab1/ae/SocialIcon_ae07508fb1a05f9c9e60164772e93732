7e290c6f11af559a7799ba90c02d6673
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SocialIcon = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var _Text = _interopRequireDefault(require("../text/Text"));

var _fonts = _interopRequireDefault(require("../config/fonts"));

var _config = require("../config");

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var colors = {
  'github-alt': '#000000',
  'google-plus-official': '#dd4b39',
  google: '#dd4b39',
  'reddit-alien': '#fc461e',
  'stack-overflow': '#f27f33',
  angellist: '#1c4082',
  codepen: '#000000',
  envelope: '#000000',
  etsy: '#f2581e',
  facebook: '#4267B2',
  'facebook-messenger': '#0084ff',
  flickr: '#ff0084',
  foursquare: '#0072b1',
  github: '#000000',
  gitlab: '#e14329',
  instagram: '#517fa4',
  linkedin: '#007bb6',
  medium: '#02b875',
  pinterest: '#cb2027',
  quora: '#a82400',
  soundcloud: '#f50',
  steam: '#c6c3c1',
  stumbleupon: '#EB4823',
  tumblr: '#32506d',
  twitch: '#6441A5',
  twitter: '#00aced',
  vimeo: '#aad450',
  vk: '#5181b8',
  wechat: '#7bb32e',
  weibo: '#e6162d',
  whatsapp: '#075e54',
  wordpress: '#21759b',
  youtube: '#bb0000'
};

var SocialIcon = function SocialIcon(_a) {
  var activityIndicatorStyle = _a.activityIndicatorStyle,
      _a$button = _a.button,
      button = _a$button === void 0 ? false : _a$button,
      disabled = _a.disabled,
      fontFamily = _a.fontFamily,
      fontStyle = _a.fontStyle,
      fontWeight = _a.fontWeight,
      _a$iconType = _a.iconType,
      iconType = _a$iconType === void 0 ? 'font-awesome' : _a$iconType,
      _a$iconColor = _a.iconColor,
      iconColor = _a$iconColor === void 0 ? 'white' : _a$iconColor,
      _a$iconSize = _a.iconSize,
      iconSize = _a$iconSize === void 0 ? 24 : _a$iconSize,
      iconStyle = _a.iconStyle,
      light = _a.light,
      loading = _a.loading,
      onLongPress = _a.onLongPress,
      onPress = _a.onPress,
      _a$Component = _a.Component,
      Component = _a$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View : _a$Component,
      _a$raised = _a.raised,
      raised = _a$raised === void 0 ? true : _a$raised,
      small = _a.small,
      style = _a.style,
      title = _a.title,
      type = _a.type,
      underlayColor = _a.underlayColor,
      attributes = __rest(_a, ["activityIndicatorStyle", "button", "disabled", "fontFamily", "fontStyle", "fontWeight", "iconType", "iconColor", "iconSize", "iconStyle", "light", "loading", "onLongPress", "onPress", "Component", "raised", "small", "style", "title", "type", "underlayColor"]);

  var shouldShowExpandedButton = button && title;
  return (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread({}, attributes), {}, {
    underlayColor: light ? 'white' : underlayColor || type && colors[type],
    onLongPress: disabled ? null : onLongPress,
    onPress: disabled ? null : onPress,
    disabled: disabled,
    style: _reactNative.StyleSheet.flatten([raised && styles.raised, styles.container, button && styles.button, !button && raised && styles.icon, !button && !light && !raised && {
      width: iconSize * 2 + 4,
      height: iconSize * 2 + 4,
      borderRadius: iconSize * 2
    }, {
      backgroundColor: type && colors[type]
    }, light && {
      backgroundColor: 'white'
    }, style && style]),
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.wrapper,
      children: [(shouldShowExpandedButton || !loading) && (0, _jsxRuntime.jsx)(_Icon.default, {
        iconStyle: _reactNative.StyleSheet.flatten([iconStyle && iconStyle]),
        color: light ? type && colors[type] : iconColor,
        name: type,
        size: iconSize,
        type: iconType
      }), shouldShowExpandedButton && (0, _jsxRuntime.jsx)(_Text.default, {
        style: _reactNative.StyleSheet.flatten([styles.title, light && {
          color: type && colors[type]
        }, fontFamily && {
          fontFamily: fontFamily
        }, fontWeight && {
          fontWeight: fontWeight
        }, fontStyle && fontStyle]),
        children: title
      }), loading && (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        animating: true,
        style: _reactNative.StyleSheet.flatten([styles.activityIndicatorStyle, activityIndicatorStyle]),
        color: light ? type && colors[type] : iconColor || 'white',
        size: small && 'small' || 'large'
      })]
    })
  }));
};

exports.SocialIcon = SocialIcon;

var styles = _reactNative.StyleSheet.create({
  container: {
    margin: 7,
    borderRadius: 30,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    paddingTop: 14,
    paddingBottom: 14
  },
  raised: (0, _extends2.default)({}, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  wrapper: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  title: (0, _extends2.default)({
    color: 'white',
    marginLeft: 15
  }, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _fonts.default.android.black),
    default: {
      fontWeight: 'bold'
    }
  })),
  icon: {
    height: 52,
    width: 52
  },
  activityIndicatorStyle: {
    marginHorizontal: 10,
    height: 0
  }
});

var _default = (0, _config.withTheme)(SocialIcon, 'SocialIcon');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,