{"version":3,"mappings":"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","names":["assetMapOverride","selectAssetSource","meta","hasOwnProperty","hash","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","index","findIndex","s","fileHashes","uri","fileUris","resolveUri","assetUrlOverride","path","join","fileScale","fileExtension","type","encodeURIComponent","suffix","name","Platform","OS","test","httpServerLocation","manifest2","extra","expoGo","developer","baseUrl","URL","debuggerHost","set","href","bundleUrl","manifestBaseUrl","protocol","resolvedPath","startsWith","pathname"],"sourceRoot":"","sources":["../src/AssetSources.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { manifestBaseUrl, getManifest, getManifest2 } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"]}