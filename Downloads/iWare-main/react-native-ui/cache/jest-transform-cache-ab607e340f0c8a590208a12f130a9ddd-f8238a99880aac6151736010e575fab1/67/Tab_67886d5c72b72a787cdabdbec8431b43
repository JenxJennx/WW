ee0edea1b43bcbd7e3912e0ddfa199b1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tab = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Button = _interopRequireDefault(require("../buttons/Button"));

var _config = require("../config");

var _color = _interopRequireDefault(require("color"));

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var TabItem = function TabItem(_a) {
  var _b, _c;

  var active = _a.active,
      theme = _a.theme,
      titleStyle = _a.titleStyle,
      containerStyle = _a.containerStyle,
      buttonStyle = _a.buttonStyle,
      variant = _a.variant,
      _a$iconPosition = _a.iconPosition,
      iconPosition = _a$iconPosition === void 0 ? 'top' : _a$iconPosition,
      title = _a.title,
      props = __rest(_a, ["active", "theme", "titleStyle", "containerStyle", "buttonStyle", "variant", "iconPosition", "title"]);

  return (0, _jsxRuntime.jsx)(_Button.default, _objectSpread({
    accessibilityRole: "tab",
    accessibilityState: {
      selected: active
    },
    accessibilityValue: typeof title === 'string' ? {
      text: title
    } : undefined,
    buttonStyle: [styles.buttonStyle, buttonStyle],
    titleStyle: [styles.titleStyle, {
      color: variant === 'primary' ? 'white' : (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.secondary,
      paddingVertical: !props.icon ? 8 : 2
    }, titleStyle],
    containerStyle: [styles.containerStyle, {
      backgroundColor: active ? (0, _color.default)((_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary).alpha(0.2).rgb().toString() : 'transparent'
    }, containerStyle],
    iconPosition: iconPosition,
    title: title
  }, props));
};

var TabContainer = function TabContainer(_a) {
  var _b, _c;

  var theme = _a.theme,
      children = _a.children,
      value = _a.value,
      _a$onChange = _a.onChange,
      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,
      indicatorStyle = _a.indicatorStyle,
      disableIndicator = _a.disableIndicator,
      variant = _a.variant,
      props = __rest(_a, ["theme", "children", "value", "onChange", "indicatorStyle", "disableIndicator", "variant"]);

  var _React$useState = _react.default.useState({
    width: 0
  }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      dim = _React$useState2[0],
      setDim = _React$useState2[1];

  var _React$useRef = _react.default.useRef(new _reactNative.Animated.Value(0)),
      animation = _React$useRef.current;

  _react.default.useEffect(function () {
    _reactNative.Animated.timing(animation, {
      toValue: value,
      useNativeDriver: true,
      duration: 170
    }).start();
  }, [animation, value]);

  var WIDTH = dim.width / _react.default.Children.count(children);

  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, _objectSpread(_objectSpread({}, props), {}, {
      accessibilityRole: "tablist",
      style: [styles.viewStyle, variant === 'primary' && {
        backgroundColor: (_b = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _b === void 0 ? void 0 : _b.primary
      }],
      onLayout: function onLayout(_ref) {
        var layout = _ref.nativeEvent.layout;
        return setDim(Object(layout));
      },
      children: [_react.default.Children.map(children, function (child, index) {
        return _react.default.cloneElement(child, {
          onPress: function onPress() {
            return onChange(index);
          },
          active: index === value,
          variant: variant
        });
      }), !disableIndicator && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.indicator, {
          backgroundColor: (_c = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _c === void 0 ? void 0 : _c.secondary,
          transform: [{
            translateX: animation.interpolate({
              inputRange: [0, 1],
              outputRange: [0, WIDTH]
            })
          }]
        }, indicatorStyle],
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            width: WIDTH
          }
        })
      })]
    }))
  });
};

var Tab = (0, _extends2.default)(TabContainer, {
  Item: TabItem
});
exports.Tab = Tab;

var _default = (0, _extends2.default)((0, _config.withTheme)(TabContainer, 'Tab'), {
  Item: (0, _config.withTheme)(TabItem, 'TabItem')
});

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  buttonStyle: {
    borderRadius: 0,
    backgroundColor: 'transparent'
  },
  titleStyle: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    textTransform: 'uppercase'
  },
  containerStyle: {
    flex: 1,
    borderRadius: 0
  },
  viewStyle: {
    flexDirection: 'row',
    position: 'relative'
  },
  indicator: {
    display: 'flex',
    position: 'absolute',
    height: 2,
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlRhYkl0ZW0iLCJfYSIsIl9iIiwiX2MiLCJhY3RpdmUiLCJ0aGVtZSIsInRpdGxlU3R5bGUiLCJjb250YWluZXJTdHlsZSIsImJ1dHRvblN0eWxlIiwidmFyaWFudCIsImljb25Qb3NpdGlvbiIsInRpdGxlIiwicHJvcHMiLCJzZWxlY3RlZCIsInRleHQiLCJ1bmRlZmluZWQiLCJzdHlsZXMiLCJjb2xvciIsImNvbG9ycyIsInNlY29uZGFyeSIsInBhZGRpbmdWZXJ0aWNhbCIsImljb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJDb2xvciIsImFscGhhIiwicmdiIiwidG9TdHJpbmciLCJUYWJDb250YWluZXIiLCJjaGlsZHJlbiIsInZhbHVlIiwib25DaGFuZ2UiLCJpbmRpY2F0b3JTdHlsZSIsImRpc2FibGVJbmRpY2F0b3IiLCJSZWFjdCIsInVzZVN0YXRlIiwid2lkdGgiLCJkaW0iLCJzZXREaW0iLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiYW5pbWF0aW9uIiwiY3VycmVudCIsInVzZUVmZmVjdCIsInRpbWluZyIsInRvVmFsdWUiLCJ1c2VOYXRpdmVEcml2ZXIiLCJkdXJhdGlvbiIsInN0YXJ0IiwiV0lEVEgiLCJDaGlsZHJlbiIsImNvdW50Iiwidmlld1N0eWxlIiwicHJpbWFyeSIsImxheW91dCIsIm5hdGl2ZUV2ZW50IiwibWFwIiwiY2hpbGQiLCJpbmRleCIsImNsb25lRWxlbWVudCIsIm9uUHJlc3MiLCJpbmRpY2F0b3IiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGVYIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJUYWIiLCJJdGVtIiwid2l0aFRoZW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImJvcmRlclJhZGl1cyIsInBhZGRpbmdIb3Jpem9udGFsIiwidGV4dFRyYW5zZm9ybSIsImZsZXgiLCJmbGV4RGlyZWN0aW9uIiwicG9zaXRpb24iLCJkaXNwbGF5IiwiaGVpZ2h0IiwiYm90dG9tIl0sInNvdXJjZXMiOlsiVGFiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBBbmltYXRlZCwgU3R5bGVTaGVldCwgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b25zL0J1dHRvbic7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcbmNvbnN0IFRhYkl0ZW0gPSAoX2EpID0+IHtcbiAgICB2YXIgX2IsIF9jO1xuICAgIHZhciB7IGFjdGl2ZSwgdGhlbWUsIHRpdGxlU3R5bGUsIGNvbnRhaW5lclN0eWxlLCBidXR0b25TdHlsZSwgdmFyaWFudCwgaWNvblBvc2l0aW9uID0gJ3RvcCcsIHRpdGxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImFjdGl2ZVwiLCBcInRoZW1lXCIsIFwidGl0bGVTdHlsZVwiLCBcImNvbnRhaW5lclN0eWxlXCIsIFwiYnV0dG9uU3R5bGVcIiwgXCJ2YXJpYW50XCIsIFwiaWNvblBvc2l0aW9uXCIsIFwidGl0bGVcIl0pO1xuICAgIHJldHVybiAoPEJ1dHRvbiBhY2Nlc3NpYmlsaXR5Um9sZT1cInRhYlwiIGFjY2Vzc2liaWxpdHlTdGF0ZT17eyBzZWxlY3RlZDogYWN0aXZlIH19IGFjY2Vzc2liaWxpdHlWYWx1ZT17dHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJyA/IHsgdGV4dDogdGl0bGUgfSA6IHVuZGVmaW5lZH0gYnV0dG9uU3R5bGU9e1tzdHlsZXMuYnV0dG9uU3R5bGUsIGJ1dHRvblN0eWxlXX0gdGl0bGVTdHlsZT17W1xuICAgICAgICBzdHlsZXMudGl0bGVTdHlsZSxcbiAgICAgICAge1xuICAgICAgICAgICAgY29sb3I6IHZhcmlhbnQgPT09ICdwcmltYXJ5JyA/ICd3aGl0ZScgOiAoX2IgPSB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhlbWUuY29sb3JzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2Vjb25kYXJ5LFxuICAgICAgICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAhcHJvcHMuaWNvbiA/IDggOiAyLFxuICAgICAgICB9LFxuICAgICAgICB0aXRsZVN0eWxlLFxuICAgIF19IGNvbnRhaW5lclN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5jb250YWluZXJTdHlsZSxcbiAgICAgICAge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBhY3RpdmVcbiAgICAgICAgICAgICAgICA/IENvbG9yKChfYyA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zZWNvbmRhcnkpLmFscGhhKDAuMikucmdiKCkudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbmVyU3R5bGUsXG4gICAgXX0gaWNvblBvc2l0aW9uPXtpY29uUG9zaXRpb259IHRpdGxlPXt0aXRsZX0gey4uLnByb3BzfS8+KTtcbn07XG5jb25zdCBUYWJDb250YWluZXIgPSAoX2EpID0+IHtcbiAgICB2YXIgX2IsIF9jO1xuICAgIHZhciB7IHRoZW1lLCBjaGlsZHJlbiwgdmFsdWUsIG9uQ2hhbmdlID0gKCkgPT4geyB9LCBpbmRpY2F0b3JTdHlsZSwgZGlzYWJsZUluZGljYXRvciwgdmFyaWFudCB9ID0gX2EsIHByb3BzID0gX19yZXN0KF9hLCBbXCJ0aGVtZVwiLCBcImNoaWxkcmVuXCIsIFwidmFsdWVcIiwgXCJvbkNoYW5nZVwiLCBcImluZGljYXRvclN0eWxlXCIsIFwiZGlzYWJsZUluZGljYXRvclwiLCBcInZhcmlhbnRcIl0pO1xuICAgIGNvbnN0IFtkaW0sIHNldERpbV0gPSBSZWFjdC51c2VTdGF0ZSh7IHdpZHRoOiAwIH0pO1xuICAgIGNvbnN0IHsgY3VycmVudDogYW5pbWF0aW9uIH0gPSBSZWFjdC51c2VSZWYobmV3IEFuaW1hdGVkLlZhbHVlKDApKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBBbmltYXRlZC50aW1pbmcoYW5pbWF0aW9uLCB7XG4gICAgICAgICAgICB0b1ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxNzAsXG4gICAgICAgIH0pLnN0YXJ0KCk7XG4gICAgfSwgW2FuaW1hdGlvbiwgdmFsdWVdKTtcbiAgICBjb25zdCBXSURUSCA9IGRpbS53aWR0aCAvIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gKDw+XG4gICAgICA8VmlldyB7Li4ucHJvcHN9IGFjY2Vzc2liaWxpdHlSb2xlPVwidGFibGlzdFwiIHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy52aWV3U3R5bGUsXG4gICAgICAgIHZhcmlhbnQgPT09ICdwcmltYXJ5JyAmJiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IChfYiA9IHRoZW1lID09PSBudWxsIHx8IHRoZW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aGVtZS5jb2xvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wcmltYXJ5LFxuICAgICAgICB9LFxuICAgIF19IG9uTGF5b3V0PXsoeyBuYXRpdmVFdmVudDogeyBsYXlvdXQgfSB9KSA9PiBzZXREaW0oT2JqZWN0KGxheW91dCkpfT5cbiAgICAgICAge1JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICBvblByZXNzOiAoKSA9PiBvbkNoYW5nZShpbmRleCksXG4gICAgICAgICAgICBhY3RpdmU6IGluZGV4ID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhcmlhbnQsXG4gICAgICAgIH0pO1xuICAgIH0pfVxuICAgICAgICB7IWRpc2FibGVJbmRpY2F0b3IgJiYgKDxBbmltYXRlZC5WaWV3IHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5pbmRpY2F0b3IsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogKF9jID0gdGhlbWUgPT09IG51bGwgfHwgdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoZW1lLmNvbG9ycykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnNlY29uZGFyeSxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWDogYW5pbWF0aW9uLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbMCwgV0lEVEhdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5kaWNhdG9yU3R5bGUsXG4gICAgXX0+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17eyB3aWR0aDogV0lEVEggfX0vPlxuICAgICAgICAgIDwvQW5pbWF0ZWQuVmlldz4pfVxuICAgICAgPC9WaWV3PlxuICAgIDwvPik7XG59O1xuY29uc3QgVGFiID0gT2JqZWN0LmFzc2lnbihUYWJDb250YWluZXIsIHtcbiAgICBJdGVtOiBUYWJJdGVtLFxufSk7XG5leHBvcnQgeyBUYWIgfTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24od2l0aFRoZW1lKFRhYkNvbnRhaW5lciwgJ1RhYicpLCB7XG4gICAgSXRlbTogd2l0aFRoZW1lKFRhYkl0ZW0sICdUYWJJdGVtJyksXG59KTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBidXR0b25TdHlsZToge1xuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICB9LFxuICAgIHRpdGxlU3R5bGU6IHtcbiAgICAgICAgcGFkZGluZ0hvcml6b250YWw6IDE2LFxuICAgICAgICBwYWRkaW5nVmVydGljYWw6IDgsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIH0sXG4gICAgY29udGFpbmVyU3R5bGU6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIH0sXG4gICAgdmlld1N0eWxlOiB7XG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB9LFxuICAgIGluZGljYXRvcjoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFmQSxJQUFJQSxNQUFNLEdBQUksUUFBUSxLQUFLQSxNQUFkLElBQXlCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtFQUNsRCxJQUFJQyxDQUFDLEdBQUcsRUFBUjs7RUFDQSxLQUFLLElBQUlDLENBQVQsSUFBY0gsQ0FBZDtJQUFpQixJQUFJSSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1AsQ0FBckMsRUFBd0NHLENBQXhDLEtBQThDRixDQUFDLENBQUNPLE9BQUYsQ0FBVUwsQ0FBVixJQUFlLENBQWpFLEVBQ2JELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQU9ILENBQUMsQ0FBQ0csQ0FBRCxDQUFSO0VBREo7O0VBRUEsSUFBSUgsQ0FBQyxJQUFJLElBQUwsSUFBYSxPQUFPSSxNQUFNLENBQUNLLHFCQUFkLEtBQXdDLFVBQXpELEVBQ0ksS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkJULENBQTdCLENBQXBCLEVBQXFEVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBM0QsRUFBbUVELENBQUMsRUFBcEUsRUFBd0U7SUFDcEUsSUFBSVQsQ0FBQyxD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