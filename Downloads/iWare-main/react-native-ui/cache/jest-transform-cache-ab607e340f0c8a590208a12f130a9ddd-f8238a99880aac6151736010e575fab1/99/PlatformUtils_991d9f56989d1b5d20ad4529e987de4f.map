{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;AAGO,IAAMA,cAAc,GAAG,CAAC,CAACC,uBAAUC,YAAnC;;AAKA,IAAMC,wBAAwB,GACnC,CAACH,cAAD,IACA,CAAC,2BAACI,oCAAmBC,WAApB,aAAC,sBAAgCC,SAAjC,CADD,IAIA,4BAACF,oCAAmBC,WAApB,aAAC,uBAAgCE,qBAAjC,CALK;;AAOA,IAAMC,2BAA2B,GAAGR,cAAc,IAAIG,wBAAtD;;AAGA,IAAMM,2BAA2B,GAAG,CAACT,cAAD,IAAmB,CAACG,wBAAxD;;;AAID,SAAUO,cAAV,GAAwB;EAAA;;EAC5B,2DAAON,oCAAmBC,WAA1B,qBAAO,uBAAgCM,WAAvC,qCAAsD,EAAtD;AACD;;AAEK,SAAUC,WAAV,GAAqB;EAAA;;EACzB,gCAAOX,uBAAUY,sBAAjB,oCAA2C,EAA3C;AACD;;AAEK,SAAUC,YAAV,GAAsB;EAC1B,OAAOb,uBAAUc,uBAAjB;AACD;;AAGM,IAAMC,eAAe,GAAGf,uBAAUgB,aAAV,GAC3B,mCAAmBhB,uBAAUgB,aAA7B,CAD2B,GAE3B,IAFG;;;AAKA,SAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,IAAlC,EAAwCC,IAAxC,EAA8CC,IAA9C;EAAA;IAAA;MAAA;QAAA;UAAA,KACDtB,cADC;YAAA;YAAA;UAAA;;UAAA,iCAEIuB,wBAAwB,CAACJ,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,IAAlB,CAF5B;;QAAA;UAAA,iCAKEE,0BAA0B,CAACL,GAAD,EAAMC,IAAN,EAAYC,IAAZ,CAL5B;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAYP,SAAeE,wBAAf,CAAwCJ,GAAxC,EAA6CC,IAA7C,EAAmDC,IAAnD,EAAyDC,IAAzD;EAAA;;EAAA;IAAA;MAAA;QAAA;UACQG,WADR,GACsBL,IAAI,IAAI,wBAAWD,GAAX,CAD9B;UAEQO,QAFR,GAEsBC,UAAU,CAACC,cAFjC,sBAEgEH,WAFhE,SAE+EJ,IAF/E;UAAA;UAAA,mCAG8BM,UAAU,CAACE,YAAX,CAAwBH,QAAxB,EAAkC;YAC5DI,GAAG,EAAE;UADuD,CAAlC,CAH9B;;QAAA;UAAA;UAGQC,MAHR,yBAGQA,MAHR;UAGgBD,GAHhB,yBAGgBA,GAHhB;;UAAA,MAMM,CAACC,MAAD,IAAYX,IAAI,KAAK,IAAT,IAAiBU,GAAG,KAAKV,IAN3C;YAAA;YAAA;UAAA;;UAAA;UAAA,mCAOqBO,UAAU,CAACT,aAAX,CAAyBC,GAAzB,EAA8BO,QAA9B,EAAwC;YACvDI,GAAG,EAAE;UADkD,CAAxC,CAPrB;;QAAA;UAAA;UAOOA,GAPP,yBAOOA,GAPP;;UAAA,MAUQV,IAAI,KAAK,IAAT,IAAiBU,GAAG,KAAKV,IAVjC;YAAA;YAAA;UAAA;;UAAA,MAWY,IAAIY,KAAJ,CACJ,gCAA8BV,IAA9B,SAAsCD,IAAtC,2BACgBF,GADhB,sCADI,CAXZ;;QAAA;UAAA,kCAkBSO,QAlBT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AA0BA,SAAeF,0BAAf,CAA0CL,GAA1C,EAA+CC,IAA/C,EAAqDC,IAArD;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,KAGMF,GAAG,CAACc,UAAJ,CAAe,SAAf,CAHN;YAAA;YAAA;UAAA;;UAAA,kCAIWd,GAJX;;QAAA;UAOQM,WAPR,GAOsBL,IAAI,IAAI,wBAAWD,GAAX,CAP9B;UAQQO,QARR,GAQsBC,UAAU,CAACC,cARjC,sBAQgEH,WARhE,SAQ+EJ,IAR/E;UAAA;UAAA,mCAYQM,UAAU,CAACT,aAAX,CAAyBC,GAAzB,EAA8BO,QAA9B,CAZR;;QAAA;UAAA,kCAaSA,QAbT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["IS_MANAGED_ENV","Constants","appOwnership","IS_BARE_ENV_WITH_UPDATES","NativeModulesProxy","ExpoUpdates","isEnabled","isUsingEmbeddedAssets","IS_ENV_WITH_UPDATES_ENABLED","IS_BARE_ENV_WITHOUT_UPDATES","getLocalAssets","localAssets","getManifest","__unsafeNoWarnManifest","getManifest2","__unsafeNoWarnManifest2","manifestBaseUrl","experienceUrl","downloadAsync","uri","hash","type","name","_downloadAsyncManagedEnv","_downloadAsyncUnmanagedEnv","cacheFileId","localUri","FileSystem","cacheDirectory","getInfoAsync","md5","exists","Error","startsWith"],"sourceRoot":"","sources":["../src/PlatformUtils.ts"],"sourcesContent":["import computeMd5 from 'blueimp-md5';\nimport Constants from 'expo-constants';\nimport { Manifest } from 'expo-constants/build/Constants.types';\nimport * as FileSystem from 'expo-file-system';\nimport { NativeModulesProxy } from 'expo-modules-core';\n\nimport { getManifestBaseUrl } from './AssetUris';\n\n// Constants.appOwnership is only available in managed apps (Expo client and standalone)\nexport const IS_MANAGED_ENV = !!Constants.appOwnership;\n\n// In the future (SDK38+) expo-updates is likely to be used in managed apps, so we decide\n// that you are in a bare app with updates if you're not in a managed app and you have\n// local assets available.\nexport const IS_BARE_ENV_WITH_UPDATES =\n  !IS_MANAGED_ENV &&\n  !!NativeModulesProxy.ExpoUpdates?.isEnabled &&\n  // if expo-updates is installed but we're running directly from the embedded bundle, we don't want\n  // to override the AssetSourceResolver\n  !NativeModulesProxy.ExpoUpdates?.isUsingEmbeddedAssets;\n\nexport const IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;\n\n// If it's not managed or bare w/ updates, then it must be bare w/o updates!\nexport const IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;\n\n// Get the localAssets property from the ExpoUpdates native module so that we do\n// not need to include expo-updates as a dependency of expo-asset\nexport function getLocalAssets() {\n  return NativeModulesProxy.ExpoUpdates?.localAssets ?? {};\n}\n\nexport function getManifest(): { [key: string]: any } {\n  return Constants.__unsafeNoWarnManifest ?? {};\n}\n\nexport function getManifest2(): Manifest | undefined {\n  return Constants.__unsafeNoWarnManifest2;\n}\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = Constants.experienceUrl\n  ? getManifestBaseUrl(Constants.experienceUrl)\n  : null;\n\n// TODO: how should this behave in bare app with updates? re: hashAssetFiles\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  if (IS_MANAGED_ENV) {\n    return _downloadAsyncManagedEnv(uri, hash, type, name);\n  }\n\n  return _downloadAsyncUnmanagedEnv(uri, hash, type);\n}\n\n/**\n * Check if the file exists on disk already, perform integrity check if so.\n * Otherwise, download it.\n */\nasync function _downloadAsyncManagedEnv(uri, hash, type, name): Promise<string> {\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n  let { exists, md5 } = await FileSystem.getInfoAsync(localUri, {\n    md5: true,\n  });\n  if (!exists || (hash !== null && md5 !== hash)) {\n    ({ md5 } = await FileSystem.downloadAsync(uri, localUri, {\n      md5: true,\n    }));\n    if (hash !== null && md5 !== hash) {\n      throw new Error(\n        `Downloaded file for asset '${name}.${type}' ` +\n          `Located at ${uri} ` +\n          `failed MD5 integrity check`\n      );\n    }\n  }\n  return localUri;\n}\n\n/**\n * Just download the asset, don't perform integrity check because we don't have\n * the hash to compare it with (we don't have hashAssetFiles plugin). Hash is\n * only used for the file name.\n */\nasync function _downloadAsyncUnmanagedEnv(uri, hash, type): Promise<string> {\n  // TODO: does this make sense to bail out if it's already at a file URL\n  // because it's already available locally?\n  if (uri.startsWith('file://')) {\n    return uri;\n  }\n\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n\n  // We don't check the FileSystem for an existing version of the asset and we\n  // also don't perform an integrity check!\n  await FileSystem.downloadAsync(uri, localUri);\n  return localUri;\n}\n"]}