{"version":3,"mappings":"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","names":["Asset","name","type","hash","uri","width","height","localUri","downloading","downloaded","_downloadCallbacks","Platform","OS","AssetUris","getFilename","getFileExtension","Promise","resolve","reject","push","ImageAssets","isImageType","getImageInfoAsync","forEach","moduleId","moduleIds","Array","isArray","all","map","fromModule","downloadAsync","virtualAssetModule","fromURI","meta","Error","IS_ENV_WITH_UPDATES_ENABLED","asset","includes","byHash","fromMetadata","metaHash","byUri","indexOf","split","extension","startsWith","substring"],"sourceRoot":"","sources":["../src/Asset.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"]}