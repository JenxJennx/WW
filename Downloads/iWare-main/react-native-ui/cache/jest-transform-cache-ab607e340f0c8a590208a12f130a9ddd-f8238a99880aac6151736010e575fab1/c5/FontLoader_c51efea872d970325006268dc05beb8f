d77c75d105ec7aa7fb3aff055647c925
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fontFamilyNeedsScoping = fontFamilyNeedsScoping;
exports.getAssetForSource = getAssetForSource;
exports.getNativeFontName = getNativeFontName;
exports.loadSingleFontAsync = loadSingleFontAsync;

var _expoAsset = require("expo-asset");

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _expoModulesCore = require("expo-modules-core");

var _reactNative = require("react-native");

var _ExpoFontLoader = _interopRequireDefault(require("./ExpoFontLoader"));

function _regeneratorRuntime() { "use strict"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

var isInClient = _expoConstants.default.appOwnership === 'expo';
var isInIOSStandalone = _expoConstants.default.appOwnership === 'standalone' && _reactNative.Platform.OS === 'ios';

function fontFamilyNeedsScoping(name) {
  return (isInClient || isInIOSStandalone) && !_expoConstants.default.systemFonts.includes(name) && name !== 'System' && !name.includes(_expoConstants.default.sessionId);
}

function getAssetForSource(source) {
  if (source instanceof _expoAsset.Asset) {
    return source;
  }

  if (typeof source === 'string') {
    return _expoAsset.Asset.fromURI(source);
  } else if (typeof source === 'number') {
    return _expoAsset.Asset.fromModule(source);
  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {
    return getAssetForSource(source.uri);
  }

  return source;
}

function loadSingleFontAsync(name, input) {
  var asset;
  return _regeneratorRuntime().async(function loadSingleFontAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          asset = input;

          if (asset.downloadAsync) {
            _context.next = 3;
            break;
          }

          throw new _expoModulesCore.CodedError("ERR_FONT_SOURCE", '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native');

        case 3:
          _context.next = 5;
          return _regeneratorRuntime().awrap(asset.downloadAsync());

        case 5:
          if (asset.downloaded) {
            _context.next = 7;
            break;
          }

          throw new _expoModulesCore.CodedError("ERR_DOWNLOAD", "Failed to download asset for font \"" + name + "\"");

        case 7:
          _context.next = 9;
          return _regeneratorRuntime().awrap(_ExpoFontLoader.default.loadAsync(getNativeFontName(name), asset.localUri));

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

function getNativeFontName(name) {
  if (fontFamilyNeedsScoping(name)) {
    return _expoConstants.default.sessionId + "-" + name;
  } else {
    return name;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBR0EsSUFBTUEsVUFBVSxHQUFHQyx1QkFBVUMsWUFBVixLQUEyQixNQUE5QztBQUNBLElBQU1DLGlCQUFpQixHQUFHRix1QkFBVUMsWUFBVixLQUEyQixZQUEzQixJQUEyQ0Usc0JBQVNDLEVBQVQsS0FBZ0IsS0FBckY7O0FBRU0sU0FBVUMsc0JBQVYsQ0FBaUNDLElBQWpDLEVBQTZDO0VBQ2pELE9BQ0UsQ0FBQ1AsVUFBVSxJQUFJRyxpQkFBZixLQUNBLENBQUNGLHVCQUFVTyxXQUFWLENBQXNCQyxRQUF0QixDQUErQkYsSUFBL0IsQ0FERCxJQUVBQSxJQUFJLEtBQUssUUFGVCxJQUdBLENBQUNBLElBQUksQ0FBQ0UsUUFBTCxDQUFjUix1QkFBVVMsU0FBeEIsQ0FKSDtBQU1EOztBQUVLLFNBQVVDLGlCQUFWLENBQTRCQyxNQUE1QixFQUE4QztFQUNsRCxJQUFJQSxNQUFNLFlBQVlDLGdCQUF0QixFQUE2QjtJQUMzQixPQUFPRCxNQUFQO0VBQ0Q7O0VBRUQsSUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0lBQzlCLE9BQU9DLGlCQUFNQyxPQUFOLENBQWNGLE1BQWQsQ0FBUDtFQUNELENBRkQsTUFFTyxJQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7SUFDckMsT0FBT0MsaUJBQU1FLFVBQU4sQ0FBaUJILE1BQWpCLENBQVA7RUFDRCxDQUZNLE1BRUEsSUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQWxCLElBQThCLE9BQU9BLE1BQU0sQ0FBQ0ksR0FBZCxLQUFzQixXQUF4RCxFQUFxRTtJQUMxRSxPQUFPTCxpQkFBaUIsQ0FBQ0MsTUFBTSxDQUFDSSxHQUFSLENBQXhCO0VBQ0Q7O0VBS0QsT0FBT0osTUFBUDtBQUNEOztBQUVNLFNBQWVLLG1CQUFmLENBQ0xWLElBREssRUFFTFcsS0FGSztFQUFBO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFJQ0MsS0FKRCxHQUlTRCxLQUpUOztVQUFBLElBS0FDLEtBQUssQ0FBQ0MsYUFMTjtZQUFBO1lBQUE7VUFBQTs7VUFBQSxNQU1HLElBQUlDLDJCQUFKLG9CQUVKLG1GQUZJLENBTkg7O1FBQUE7VUFBQTtVQUFBLG1DQVlDRixLQUFLLENBQUNDLGFBQU4sRUFaRDs7UUFBQTtVQUFBLElBYUFELEtBQUssQ0FBQ0csVUFiTjtZQUFBO1lBQUE7VUFBQTs7VUFBQSxNQWNHLElBQUlELDJCQUFKLDBEQUFxRWQsSUFBckUsUUFkSDs7UUFBQTtVQUFBO1VBQUEsbUNBZ0JDZ0Isd0JBQWVDLFNBQWYsQ0FBeUJDLGlCQUFpQixDQUFDbEIsSUFBRCxDQUExQyxFQUFrRFksS0FBSyxDQUFDTyxRQUF4RCxDQWhCRDs7UUFBQTtRQUFBO1VBQUE7TUFBQTtJQUFBO0VBQUE7QUFBQTs7QUFtQkQsU0FBVUQsaUJBQVYsQ0FBNEJsQixJQUE1QixFQUF3QztFQUM1QyxJQUFJRCxzQkFBc0IsQ0FBQ0MsSUFBRCxDQUExQixFQUFrQztJQUNoQyxPQUFVTix1QkFBVVMsU0FBcEIsU0FBaUNILElBQWpDO0VBQ0QsQ0FGRCxNQUVPO0lBQ0wsT0FBT0EsSUFBUDtFQUNEO0FBQ0YiLCJuYW1lcyI6WyJpc0luQ2xpZW50IiwiQ29uc3RhbnRzIiwiYXBwT3duZXJzaGlwIiwiaXNJbklPU1N0YW5kYWxvbmUiLCJQbGF0Zm9ybSIsIk9TIiwiZm9udEZhbWlseU5lZWRzU2NvcGluZyIsIm5hbWUiLCJzeXN0ZW1Gb250cyIsImluY2x1ZGVzIiwic2Vzc2lvbklkIiwiZ2V0QXNzZXRGb3JTb3VyY2UiLCJzb3VyY2UiLCJBc3NldCIsImZyb21VUkkiLCJmcm9tTW9kdWxlIiwidXJpIiwibG9hZFNpbmdsZUZvbnRBc3luYyIsImlucHV0IiwiYXNzZXQiLCJkb3dubG9hZEFzeW5jIiwiQ29kZWRFcnJvciIsImRvd25sb2FkZWQiLCJFeHBvRm9udExvYWRlciIsImxvYWRBc3luYyIsImdldE5hdGl2ZUZvbnROYW1lIiwibG9jYWxVcmkiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0ZvbnRMb2FkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXQgfSBmcm9tICdleHBvLWFzc2V0JztcbmltcG9ydCBDb25zdGFudHMgZnJvbSAnZXhwby1jb25zdGFudHMnO1xuaW1wb3J0IHsgQ29kZWRFcnJvciB9IGZyb20gJ2V4cG8tbW9kdWxlcy1jb3JlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEV4cG9Gb250TG9hZGVyIGZyb20gJy4vRXhwb0ZvbnRMb2FkZXInO1xuaW1wb3J0IHsgRm9udFJlc291cmNlLCBGb250U291cmNlIH0gZnJvbSAnLi9Gb250LnR5cGVzJztcblxuY29uc3QgaXNJbkNsaWVudCA9IENvbnN0YW50cy5hcHBPd25lcnNoaXAgPT09ICdleHBvJztcbmNvbnN0IGlzSW5JT1NTdGFuZGFsb25lID0gQ29uc3RhbnRzLmFwcE93bmVyc2hpcCA9PT0gJ3N0YW5kYWxvbmUnICYmIFBsYXRmb3JtLk9TID09PSAnaW9zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZvbnRGYW1pbHlOZWVkc1Njb3BpbmcobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgKGlzSW5DbGllbnQgfHwgaXNJbklPU1N0YW5kYWxvbmUpICYmXG4gICAgIUNvbnN0YW50cy5zeXN0ZW1Gb250cy5pbmNsdWRlcyhuYW1lKSAmJlxuICAgIG5hbWUgIT09ICdTeXN0ZW0nICYmXG4gICAgIW5hbWUuaW5jbHVkZXMoQ29uc3RhbnRzLnNlc3Npb25JZClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFzc2V0Rm9yU291cmNlKHNvdXJjZTogRm9udFNvdXJjZSk6IEFzc2V0IHwgRm9udFJlc291cmNlIHtcbiAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFzc2V0KSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBBc3NldC5mcm9tVVJJKHNvdXJjZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gQXNzZXQuZnJvbU1vZHVsZShzb3VyY2UpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnICYmIHR5cGVvZiBzb3VyY2UudXJpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnZXRBc3NldEZvclNvdXJjZShzb3VyY2UudXJpKTtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmUgRXJyb3I6IFR5cGUgJ3N0cmluZycgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnQXNzZXQnXG4gIC8vIFdlIGNhbid0IGhhdmUgYSBzdHJpbmcgaGVyZSwgd2Ugd291bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3IgaWYgIWlzV2ViXG4gIC8vIG9yIHJldHVybmVkIEFzc2V0LmZyb21Nb2R1bGUgaWYgaXNXZWIuXG4gIHJldHVybiBzb3VyY2U7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkU2luZ2xlRm9udEFzeW5jKFxuICBuYW1lOiBzdHJpbmcsXG4gIGlucHV0OiBBc3NldCB8IEZvbnRSZXNvdXJjZVxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGFzc2V0ID0gaW5wdXQgYXMgQXNzZXQ7XG4gIGlmICghYXNzZXQuZG93bmxvYWRBc3luYykge1xuICAgIHRocm93IG5ldyBDb2RlZEVycm9yKFxuICAgICAgYEVSUl9GT05UX1NPVVJDRWAsXG4gICAgICAnYGxvYWRTaW5nbGVGb250QXN5bmNgIGV4cGVjdGVkIHJlc291cmNlIG9mIHR5cGUgYEFzc2V0YCBmcm9tIGV4cG8tYXNzZXQgb24gbmF0aXZlJ1xuICAgICk7XG4gIH1cblxuICBhd2FpdCBhc3NldC5kb3dubG9hZEFzeW5jKCk7XG4gIGlmICghYXNzZXQuZG93bmxvYWRlZCkge1xuICAgIHRocm93IG5ldyBDb2RlZEVycm9yKGBFUlJfRE9XTkxPQURgLCBgRmFpbGVkIHRvIGRvd25sb2FkIGFzc2V0IGZvciBmb250IFwiJHtuYW1lfVwiYCk7XG4gIH1cbiAgYXdhaXQgRXhwb0ZvbnRMb2FkZXIubG9hZEFzeW5jKGdldE5hdGl2ZUZvbnROYW1lKG5hbWUpLCBhc3NldC5sb2NhbFVyaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVGb250TmFtZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoZm9udEZhbWlseU5lZWRzU2NvcGluZyhuYW1lKSkge1xuICAgIHJldHVybiBgJHtDb25zdGFudHMuc2Vzc2lvbklkfS0ke25hbWV9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuIl19