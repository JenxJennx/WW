{"version":3,"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAGA,IAAMA,UAAU,GAAGC,uBAAUC,YAAV,KAA2B,MAA9C;AACA,IAAMC,iBAAiB,GAAGF,uBAAUC,YAAV,KAA2B,YAA3B,IAA2CE,sBAASC,EAAT,KAAgB,KAArF;;AAEM,SAAUC,sBAAV,CAAiCC,IAAjC,EAA6C;EACjD,OACE,CAACP,UAAU,IAAIG,iBAAf,KACA,CAACF,uBAAUO,WAAV,CAAsBC,QAAtB,CAA+BF,IAA/B,CADD,IAEAA,IAAI,KAAK,QAFT,IAGA,CAACA,IAAI,CAACE,QAAL,CAAcR,uBAAUS,SAAxB,CAJH;AAMD;;AAEK,SAAUC,iBAAV,CAA4BC,MAA5B,EAA8C;EAClD,IAAIA,MAAM,YAAYC,gBAAtB,EAA6B;IAC3B,OAAOD,MAAP;EACD;;EAED,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAOC,iBAAMC,OAAN,CAAcF,MAAd,CAAP;EACD,CAFD,MAEO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IACrC,OAAOC,iBAAME,UAAN,CAAiBH,MAAjB,CAAP;EACD,CAFM,MAEA,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACI,GAAd,KAAsB,WAAxD,EAAqE;IAC1E,OAAOL,iBAAiB,CAACC,MAAM,CAACI,GAAR,CAAxB;EACD;;EAKD,OAAOJ,MAAP;AACD;;AAEM,SAAeK,mBAAf,CACLV,IADK,EAELW,KAFK;EAAA;EAAA;IAAA;MAAA;QAAA;UAICC,KAJD,GAISD,KAJT;;UAAA,IAKAC,KAAK,CAACC,aALN;YAAA;YAAA;UAAA;;UAAA,MAMG,IAAIC,2BAAJ,oBAEJ,mFAFI,CANH;;QAAA;UAAA;UAAA,mCAYCF,KAAK,CAACC,aAAN,EAZD;;QAAA;UAAA,IAaAD,KAAK,CAACG,UAbN;YAAA;YAAA;UAAA;;UAAA,MAcG,IAAID,2BAAJ,0DAAqEd,IAArE,QAdH;;QAAA;UAAA;UAAA,mCAgBCgB,wBAAeC,SAAf,CAAyBC,iBAAiB,CAAClB,IAAD,CAA1C,EAAkDY,KAAK,CAACO,QAAxD,CAhBD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAmBD,SAAUD,iBAAV,CAA4BlB,IAA5B,EAAwC;EAC5C,IAAID,sBAAsB,CAACC,IAAD,CAA1B,EAAkC;IAChC,OAAUN,uBAAUS,SAApB,SAAiCH,IAAjC;EACD,CAFD,MAEO;IACL,OAAOA,IAAP;EACD;AACF","names":["isInClient","Constants","appOwnership","isInIOSStandalone","Platform","OS","fontFamilyNeedsScoping","name","systemFonts","includes","sessionId","getAssetForSource","source","Asset","fromURI","fromModule","uri","loadSingleFontAsync","input","asset","downloadAsync","CodedError","downloaded","ExpoFontLoader","loadAsync","getNativeFontName","localUri"],"sourceRoot":"","sources":["../src/FontLoader.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource } from './Font.types';\n\nconst isInClient = Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as Asset;\n  if (!asset.downloadAsync) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'\n    );\n  }\n\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri);\n}\n\nexport function getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n"]}