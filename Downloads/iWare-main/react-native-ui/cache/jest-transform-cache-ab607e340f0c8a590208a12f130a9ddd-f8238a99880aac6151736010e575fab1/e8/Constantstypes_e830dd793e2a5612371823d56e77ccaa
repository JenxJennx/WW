c2c16c8c84214bee53546ee55df377aa
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserInterfaceIdiom = exports.ExecutionEnvironment = exports.AppOwnership = void 0;
var AppOwnership;
exports.AppOwnership = AppOwnership;

(function (AppOwnership) {
  AppOwnership["Standalone"] = "standalone";
  AppOwnership["Expo"] = "expo";
  AppOwnership["Guest"] = "guest";
})(AppOwnership || (exports.AppOwnership = AppOwnership = {}));

var ExecutionEnvironment;
exports.ExecutionEnvironment = ExecutionEnvironment;

(function (ExecutionEnvironment) {
  ExecutionEnvironment["Bare"] = "bare";
  ExecutionEnvironment["Standalone"] = "standalone";
  ExecutionEnvironment["StoreClient"] = "storeClient";
})(ExecutionEnvironment || (exports.ExecutionEnvironment = ExecutionEnvironment = {}));

var UserInterfaceIdiom;
exports.UserInterfaceIdiom = UserInterfaceIdiom;

(function (UserInterfaceIdiom) {
  UserInterfaceIdiom["Handset"] = "handset";
  UserInterfaceIdiom["Tablet"] = "tablet";
  UserInterfaceIdiom["Unsupported"] = "unsupported";
})(UserInterfaceIdiom || (exports.UserInterfaceIdiom = UserInterfaceIdiom = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7OztBQUdBLElBQVlBLFlBQVo7OztBQUFBLFdBQVlBLFlBQVosRUFBd0I7RUFJdEJBO0VBSUFBO0VBSUFBO0FBQ0QsQ0FiRCxFQUFZQSxZQUFZLDRCQUFaQSxZQUFZLE1BQXhCOztBQWdCQSxJQUFZQyxvQkFBWjs7O0FBQUEsV0FBWUEsb0JBQVosRUFBZ0M7RUFDOUJBO0VBQ0FBO0VBQ0FBO0FBQ0QsQ0FKRCxFQUFZQSxvQkFBb0Isb0NBQXBCQSxvQkFBb0IsTUFBaEM7O0FBV0EsSUFBWUMsa0JBQVo7OztBQUFBLFdBQVlBLGtCQUFaLEVBQThCO0VBQzVCQTtFQUNBQTtFQUNBQTtBQUNELENBSkQsRUFBWUEsa0JBQWtCLGtDQUFsQkEsa0JBQWtCLE1BQTlCIiwibmFtZXMiOlsiQXBwT3duZXJzaGlwIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJVc2VySW50ZXJmYWNlSWRpb20iXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NvbnN0YW50cy50eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBvQ29uZmlnIH0gZnJvbSAnQGV4cG8vY29uZmlnLXR5cGVzJztcblxuLy8gQG5lZWRzQXVkaXRcbmV4cG9ydCBlbnVtIEFwcE93bmVyc2hpcCB7XG4gIC8qKlxuICAgKiBJdCBpcyBhIFtzdGFuZGFsb25lIGFwcF0oL2NsYXNzaWMvYnVpbGRpbmctc3RhbmRhbG9uZS1hcHBzI2J1aWxkaW5nLXN0YW5kYWxvbmUtYXBwcykuXG4gICAqL1xuICBTdGFuZGFsb25lID0gJ3N0YW5kYWxvbmUnLFxuICAvKipcbiAgICogVGhlIGV4cGVyaWVuY2UgaXMgcnVubmluZyBpbnNpZGUgb2YgdGhlIEV4cG8gR28gYXBwLlxuICAgKi9cbiAgRXhwbyA9ICdleHBvJyxcbiAgLyoqXG4gICAqIEl0IGhhcyBiZWVuIG9wZW5lZCB0aHJvdWdoIGEgbGluayBmcm9tIGEgc3RhbmRhbG9uZSBhcHAuXG4gICAqL1xuICBHdWVzdCA9ICdndWVzdCcsXG59XG5cbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IGVudW0gRXhlY3V0aW9uRW52aXJvbm1lbnQge1xuICBCYXJlID0gJ2JhcmUnLFxuICBTdGFuZGFsb25lID0gJ3N0YW5kYWxvbmUnLFxuICBTdG9yZUNsaWVudCA9ICdzdG9yZUNsaWVudCcsXG59XG5cbi8vIEBuZWVkc0F1ZGl0XG4vKipcbiAqIEN1cnJlbnQgc3VwcG9ydGVkIHZhbHVlcyBhcmUgYGhhbmRzZXRgIGFuZCBgdGFibGV0YC4gQXBwbGUgVFYgYW5kIENhclBsYXkgd2lsbCBzaG93IHVwXG4gKiBhcyBgdW5zdXBwb3J0ZWRgLlxuICovXG5leHBvcnQgZW51bSBVc2VySW50ZXJmYWNlSWRpb20ge1xuICBIYW5kc2V0ID0gJ2hhbmRzZXQnLFxuICBUYWJsZXQgPSAndGFibGV0JyxcbiAgVW5zdXBwb3J0ZWQgPSAndW5zdXBwb3J0ZWQnLFxufVxuXG4vLyBAbmVlZHNBdWRpdFxuZXhwb3J0IGludGVyZmFjZSBJT1NNYW5pZmVzdCB7XG4gIC8qKlxuICAgKiBUaGUgYnVpbGQgbnVtYmVyIHNwZWNpZmllZCBpbiB0aGUgZW1iZWRkZWQgKipJbmZvLnBsaXN0KiogdmFsdWUgZm9yIGBDRkJ1bmRsZVZlcnNpb25gIGluIHRoaXMgYXBwLlxuICAgKiBJbiBhIHN0YW5kYWxvbmUgYXBwLCB5b3UgY2FuIHNldCB0aGlzIHdpdGggdGhlIGBpb3MuYnVpbGROdW1iZXJgIHZhbHVlIGluICoqYXBwLmpzb24qKi4gVGhpc1xuICAgKiBtYXkgZGlmZmVyIGZyb20gdGhlIHZhbHVlIGluIGBDb25zdGFudHMubWFuaWZlc3QuaW9zLmJ1aWxkTnVtYmVyYCBiZWNhdXNlIHRoZSBtYW5pZmVzdFxuICAgKiBjYW4gYmUgdXBkYXRlZCwgd2hlcmVhcyB0aGlzIHZhbHVlIHdpbGwgbmV2ZXIgY2hhbmdlIGZvciBhIGdpdmVuIG5hdGl2ZSBiaW5hcnkuXG4gICAqIFRoZSB2YWx1ZSBpcyBzZXQgdG8gYG51bGxgIGluIGNhc2UgeW91IHJ1biB5b3VyIGFwcCBpbiBFeHBvIEdvLlxuICAgKi9cbiAgYnVpbGROdW1iZXI6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgQXBwbGUgaW50ZXJuYWwgbW9kZWwgaWRlbnRpZmllciBmb3IgdGhpcyBkZXZpY2UsIGUuZy4gYGlQaG9uZTEsMWAuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1kZXZpY2VgJ3MgW2BEZXZpY2UubW9kZWxJZGBdKC4vZGV2aWNlLyNkZXZpY2Vtb2RlbGlkKS5cbiAgICovXG4gIHBsYXRmb3JtOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgaHVtYW4tcmVhZGFibGUgbW9kZWwgbmFtZSBvZiB0aGlzIGRldmljZSwgZS5nLiBgXCJpUGhvbmUgNyBQbHVzXCJgIGlmIGl0IGNhbiBiZSBkZXRlcm1pbmVkLFxuICAgKiBvdGhlcndpc2Ugd2lsbCBiZSBgbnVsbGAuXG4gICAqIEBkZXByZWNhdGVkIE1vdmVkIHRvIGBleHBvLWRldmljZWAgYXMgW2BEZXZpY2UubW9kZWxOYW1lYF0oLi9kZXZpY2UvI2RldmljZW1vZGVsbmFtZSkuXG4gICAqL1xuICBtb2RlbDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSB1c2VyIGludGVyZmFjZSBpZGlvbSBvZiB0aGlzIGRldmljZSwgaS5lLiB3aGV0aGVyIHRoZSBhcHAgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgYW4gaVBhZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBleHBvLWRldmljZWAncyBbYERldmljZS5nZXREZXZpY2VUeXBlQXN5bmMoKWBdKC4vZGV2aWNlLyNkZXZpY2VnZXRkZXZpY2V0eXBlYXN5bmMpLlxuICAgKi9cbiAgdXNlckludGVyZmFjZUlkaW9tOiBVc2VySW50ZXJmYWNlSWRpb207XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiBpT1MgcnVubmluZyBvbiB0aGlzIGRldmljZSwgZS5nLiBgMTAuM2AuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1kZXZpY2VgJ3MgW2BEZXZpY2Uub3NWZXJzaW9uYF0oLi9kZXZpY2UvI2RldmljZW9zdmVyc2lvbikuXG4gICAqL1xuICBzeXN0ZW1WZXJzaW9uOiBzdHJpbmc7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLy8gQG5lZWRzQXVkaXRcbmV4cG9ydCBpbnRlcmZhY2UgQW5kcm9pZE1hbmlmZXN0IHtcbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIGNvZGUgc2V0IGJ5IGBhbmRyb2lkLnZlcnNpb25Db2RlYCBpbiBhcHAuanNvbi5cbiAgICogVGhlIHZhbHVlIGlzIHNldCB0byBgbnVsbGAgaW4gY2FzZSB5b3UgcnVuIHlvdXIgYXBwIGluIEV4cG8gR28uXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1hcHBsaWNhdGlvbmAncyBbYEFwcGxpY2F0aW9uLm5hdGl2ZUJ1aWxkVmVyc2lvbmBdKC4vYXBwbGljYXRpb24vI2FwcGxpY2F0aW9ubmF0aXZlYnVpbGR2ZXJzaW9uKS5cbiAgICovXG4gIHZlcnNpb25Db2RlOiBudW1iZXI7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXZWJNYW5pZmVzdCB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLy8gQGRvY3NNaXNzaW5nXG5leHBvcnQgaW50ZXJmYWNlIE1hbmlmZXN0QXNzZXQge1xuICB1cmw6IHN0cmluZztcbn1cblxuLy8gQG5lZWRzQXVkaXQgQGRvY3NNaXNzaW5nXG4vKipcbiAqIEEgbW9kZXJuIG1hbmlmZXN0LlxuICovXG5leHBvcnQgdHlwZSBNYW5pZmVzdCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHJ1bnRpbWVWZXJzaW9uOiBzdHJpbmc7XG4gIGxhdW5jaEFzc2V0OiBNYW5pZmVzdEFzc2V0O1xuICBhc3NldHM6IE1hbmlmZXN0QXNzZXRbXTtcbiAgbWV0YWRhdGE6IG9iamVjdDtcbiAgZXh0cmE/OiBNYW5pZmVzdEV4dHJhO1xufTtcblxuLy8gQGRvY3NNaXNzaW5nXG5leHBvcnQgdHlwZSBNYW5pZmVzdEV4dHJhID0gQ2xpZW50U2NvcGluZ0NvbmZpZyAmIHtcbiAgZXhwb0NsaWVudD86IEV4cG9DbGllbnRDb25maWc7XG4gIGV4cG9Hbz86IEV4cG9Hb0NvbmZpZztcbiAgZWFzPzogRUFTQ29uZmlnO1xufTtcblxuLy8gQG5lZWRzQXVkaXRcbmV4cG9ydCB0eXBlIEVBU0NvbmZpZyA9IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBmb3IgdGhpcyBwcm9qZWN0IGlmIGl0J3MgdXNpbmcgRUFTLiBVVUlELiBUaGlzIHZhbHVlIHdpbGwgbm90IGNoYW5nZSB3aGVuIGEgcHJvamVjdCBpc1xuICAgKiB0cmFuc2ZlcnJlZCBiZXR3ZWVuIGFjY291bnRzIG9yIHJlbmFtZWQuXG4gICAqL1xuICBwcm9qZWN0SWQ/OiBzdHJpbmc7XG59O1xuXG4vLyBAbmVlZHNBdWRpdFxuZXhwb3J0IHR5cGUgQ2xpZW50U2NvcGluZ0NvbmZpZyA9IHtcbiAgLyoqXG4gICAqIEFuIG9wYXF1ZSB1bmlxdWUgc3RyaW5nIGZvciBzY29waW5nIGNsaWVudC1zaWRlIGRhdGEgdG8gdGhpcyBwcm9qZWN0LiBUaGlzIHZhbHVlXG4gICAqIHdpbGwgbm90IGNoYW5nZSB3aGVuIGEgcHJvamVjdCBpcyB0cmFuc2ZlcnJlZCBiZXR3ZWVuIGFjY291bnRzIG9yIHJlbmFtZWQuXG4gICAqL1xuICBzY29wZUtleT86IHN0cmluZztcbn07XG5cbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IHR5cGUgRXhwb0dvQ29uZmlnID0ge1xuICBtYWluTW9kdWxlTmFtZT86IHN0cmluZztcbiAgZGVidWdnZXJIb3N0Pzogc3RyaW5nO1xuICBsb2dVcmw/OiBzdHJpbmc7XG4gIGRldmVsb3Blcj86IHtcbiAgICB0b29sPzogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfTtcbiAgcGFja2FnZXJPcHRzPzogRXhwb0dvUGFja2FnZXJPcHRzO1xufTtcblxuLy8gQGRvY3NNaXNzaW5nXG5leHBvcnQgdHlwZSBFeHBvR29QYWNrYWdlck9wdHMgPSB7XG4gIGhvc3RUeXBlPzogc3RyaW5nO1xuICBkZXY/OiBib29sZWFuO1xuICBzdHJpY3Q/OiBib29sZWFuO1xuICBtaW5pZnk/OiBib29sZWFuO1xuICB1cmxUeXBlPzogc3RyaW5nO1xuICB1cmxSYW5kb21uZXNzPzogc3RyaW5nO1xuICBsYW5UeXBlPzogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBFeHBvQ2xpZW50Q29uZmlnID0gRXhwb0NvbmZpZyAmIHtcbiAgLyoqXG4gICAqIFB1Ymxpc2hlZCBhcHBzIG9ubHkuXG4gICAqL1xuICByZWxlYXNlSWQ/OiBzdHJpbmc7XG4gIHJldmlzaW9uSWQ/OiBzdHJpbmc7XG4gIHJlbGVhc2VDaGFubmVsPzogc3RyaW5nO1xuICBidW5kbGVVcmw6IHN0cmluZztcbiAgaG9zdFVyaT86IHN0cmluZztcbiAgcHVibGlzaGVkVGltZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyBmb3IgdGhpcyBwcm9qZWN0LlxuICAgKiBAZGVwcmVjYXRlZCBQcmVmZXIgYHByb2plY3RJZGAgb3IgYG9yaWdpbmFsRnVsbE5hbWVgIGluc3RlYWQgZm9yIGlkZW50aWZpY2F0aW9uIGFuZFxuICAgKiBgc2NvcGVLZXlgIGZvciBzY29waW5nIGR1ZSB0byBpbW11dGFiaWxpdHkuXG4gICAqL1xuICBpZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBvcmlnaW5hbCBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyBmb3IgdGhpcyBwcm9qZWN0LiBGb3JtYXR0ZWQgbGlrZSBgQHVzZXJuYW1lL3NsdWdgLlxuICAgKiBXaGVuIHVuYXV0aGVudGljYXRlZCwgdGhlIHVzZXJuYW1lIGlzIGBAYW5vbnltb3VzYC4gRm9yIHB1Ymxpc2hlZCBwcm9qZWN0cywgdGhpcyB2YWx1ZVxuICAgKiB3aWxsIG5vdCBjaGFuZ2Ugd2hlbiBhIHByb2plY3QgaXMgdHJhbnNmZXJyZWQgYmV0d2VlbiBhY2NvdW50cyBvciByZW5hbWVkLlxuICAgKi9cbiAgb3JpZ2luYWxGdWxsTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyB1c2VkIGZvciBkaXNwbGF5IHB1cnBvc2VzLiBGb3JtYXR0ZWQgbGlrZSBgQHVzZXJuYW1lL3NsdWdgLlxuICAgKiBXaGVuIHVuYXV0aGVudGljYXRlZCwgdGhlIHVzZXJuYW1lIGlzIGBAYW5vbnltb3VzYC4gRm9yIHB1Ymxpc2hlZCBwcm9qZWN0cywgdGhpcyB2YWx1ZVxuICAgKiBtYXkgY2hhbmdlIHdoZW4gYSBwcm9qZWN0IGlzIHRyYW5zZmVycmVkIGJldHdlZW4gYWNjb3VudHMgb3IgcmVuYW1lZC5cbiAgICovXG4gIGN1cnJlbnRGdWxsTmFtZT86IHN0cmluZztcbn07XG5cbi8qKlxuICogQGhpZGRlblxuICogQSBjbGFzc2ljIG1hbmlmZXN0IGh0dHBzOi8vZG9jcy5leHBvLmRldi9ndWlkZXMvaG93LWV4cG8td29ya3MvI2V4cG8tbWFuaWZlc3RcbiAqL1xuZXhwb3J0IHR5cGUgQXBwTWFuaWZlc3QgPSBFeHBvQ2xpZW50Q29uZmlnICZcbiAgRXhwb0dvQ29uZmlnICZcbiAgRUFTQ29uZmlnICZcbiAgQ2xpZW50U2NvcGluZ0NvbmZpZyAmIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH07XG5cbi8vIEBuZWVkc0F1ZGl0IEBkb2NzTWlzc2luZ1xuZXhwb3J0IGludGVyZmFjZSBQbGF0Zm9ybU1hbmlmZXN0IHtcbiAgaW9zPzogSU9TTWFuaWZlc3Q7XG4gIGFuZHJvaWQ/OiBBbmRyb2lkTWFuaWZlc3Q7XG4gIHdlYj86IFdlYk1hbmlmZXN0O1xuICBkZXRhY2g/OiB7XG4gICAgc2NoZW1lPzogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfTtcbiAgbG9nVXJsPzogc3RyaW5nO1xuICBzY2hlbWU/OiBzdHJpbmc7XG4gIGhvc3RVcmk/OiBzdHJpbmc7XG4gIGRldmVsb3Blcj86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vLyBAbmVlZHNBdWRpdCBAZG9jc01pc3Npbmdcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZUNvbnN0YW50cyB7XG4gIG5hbWU6ICdFeHBvbmVudENvbnN0YW50cyc7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGBleHBvYCwgYHN0YW5kYWxvbmVgLCBvciBgZ3Vlc3RgLiBUaGlzIHByb3BlcnR5IG9ubHkgYXBwbGllcyB0byB0aGUgbWFuYWdlZCB3b3JrZmxvd1xuICAgKiBhbmQgY2xhc3NpYyBidWlsZHM7IGZvciBhcHBzIGJ1aWx0IHdpdGggRUFTIEJ1aWxkIGFuZCBpbiBiYXJlIHdvcmtmbG93LCB0aGUgcmVzdWx0IGlzXG4gICAqIGFsd2F5cyBgbnVsbGAuXG4gICAqL1xuICBhcHBPd25lcnNoaXA6IEFwcE93bmVyc2hpcCB8IG51bGw7XG4gIGRlYnVnTW9kZTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgbmFtZSBmb3IgdGhlIGRldmljZSB0eXBlLlxuICAgKi9cbiAgZGV2aWNlTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBbZGV2aWNlIHllYXIgY2xhc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kZXZpY2UteWVhci1jbGFzcykgb2YgdGhpcyBkZXZpY2UuXG4gICAqIEBkZXByZWNhdGVkIE1vdmVkIHRvIGBleHBvLWRldmljZWAgYXMgW2BEZXZpY2UuZGV2aWNlWWVhckNsYXNzYF0oLi9kZXZpY2UvI2RldmljZXllYXJjbGFzcykuXG4gICAqL1xuICBkZXZpY2VZZWFyQ2xhc3M6IG51bWJlciB8IG51bGw7XG4gIGV4ZWN1dGlvbkVudmlyb25tZW50OiBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiAgZXhwZXJpZW5jZVVybDogc3RyaW5nO1xuICAvLyBvbmx5IG51bGxhYmxlIG9uIHdlYlxuICBleHBvUnVudGltZVZlcnNpb246IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBzdHJpbmcgb2YgdGhlIEV4cG8gR28gYXBwIGN1cnJlbnRseSBydW5uaW5nLlxuICAgKiBSZXR1cm5zIGBudWxsYCBpbiBiYXJlIHdvcmtmbG93IGFuZCB3ZWIuXG4gICAqL1xuICBleHBvVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgaXNEZXRhY2hlZD86IGJvb2xlYW47XG4gIGludGVudFVyaT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGlkZW50aWZpZXIgdGhhdCBpcyB1bmlxdWUgdG8gdGhpcyBwYXJ0aWN1bGFyIGRldmljZSBhbmQgd2hvc2UgbGlmZXRpbWUgaXMgYXQgbGVhc3QgYXMgbG9uZ1xuICAgKiBhcyB0aGUgaW5zdGFsbGF0aW9uIG9mIHRoZSBhcHAuXG4gICAqIEBkZXByZWNhdGVkIGBDb25zdGFudHMuaW5zdGFsbGF0aW9uSWRgIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZ2VuZXJhdGluZyB5b3VyIG93biBJRCBhbmRcbiAgICogc3RvcmluZyBpdC4gVGhpcyBBUEkgd2lsbCBiZSByZW1vdmVkIGluIFNESyA0NC5cbiAgICovXG4gIGluc3RhbGxhdGlvbklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBgdHJ1ZWAgaWYgdGhlIGFwcCBpcyBydW5uaW5nIG9uIGEgZGV2aWNlLCBgZmFsc2VgIGlmIHJ1bm5pbmcgaW4gYSBzaW11bGF0b3Igb3IgZW11bGF0b3IuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1kZXZpY2VgJ3MgW2BEZXZpY2UuaXNEZXZpY2VgXSguL2RldmljZS8jZGV2aWNlaXNkZXZpY2UpLlxuICAgKi9cbiAgaXNEZXZpY2U6IGJvb2xlYW47XG4gIGlzSGVhZGxlc3M6IGJvb2xlYW47XG4gIGxpbmtpbmdVcmk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSAqKkluZm8ucGxpc3QqKiB2YWx1ZSBmb3IgYENGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nYCBvbiBpT1MgYW5kIHRoZSB2ZXJzaW9uIG5hbWUgc2V0XG4gICAqIGJ5IGB2ZXJzaW9uYCBpbiBhcHAuanNvbiBvbiBBbmRyb2lkIGF0IHRoZSB0aW1lIHRoZSBuYXRpdmUgYXBwIHdhcyBidWlsdC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBleHBvLWFwcGxpY2F0aW9uYCdzIFtgQXBwbGljYXRpb24ubmF0aXZlQXBwbGljYXRpb25WZXJzaW9uYF0oLi9hcHBsaWNhdGlvbi8jYXBwbGljYXRpb25uYXRpdmVhcHBsaWNhdGlvbnZlcnNpb24pLlxuICAgKi9cbiAgbmF0aXZlQXBwVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSAqKkluZm8ucGxpc3QqKiB2YWx1ZSBmb3IgYENGQnVuZGxlVmVyc2lvbmAgb24gaU9TIChzZXQgd2l0aCBgaW9zLmJ1aWxkTnVtYmVyYCB2YWx1ZSBpblxuICAgKiAqKmFwcC5qc29uKiogaW4gYSBzdGFuZGFsb25lIGFwcCkgYW5kIHRoZSB2ZXJzaW9uIGNvZGUgc2V0IGJ5IGBhbmRyb2lkLnZlcnNpb25Db2RlYCBpblxuICAgKiAqKmFwcC5qc29uKiogb24gQW5kcm9pZCBhdCB0aGUgdGltZSB0aGUgbmF0aXZlIGFwcCB3YXMgYnVpbHQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1hcHBsaWNhdGlvbmAncyBbYEFwcGxpY2F0aW9uLm5hdGl2ZUJ1aWxkVmVyc2lvbmBdKC4vYXBwbGljYXRpb24vI2FwcGxpY2F0aW9ubmF0aXZlYnVpbGR2ZXJzaW9uKS5cbiAgICovXG4gIG5hdGl2ZUJ1aWxkVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIENsYXNzaWMgbWFuaWZlc3QgZm9yIEV4cG8gYXBwcyB1c2luZyBjbGFzc2ljIHVwZGF0ZXMuXG4gICAqIFJldHVybnMgYG51bGxgIGluIGJhcmUgd29ya2Zsb3cgYW5kIHdoZW4gYG1hbmlmZXN0MmAgaXMgbm9uLW51bGwuXG4gICAqL1xuICBtYW5pZmVzdDogQXBwTWFuaWZlc3QgfCBudWxsO1xuICAvKipcbiAgICogTmV3IG1hbmlmZXN0IGZvciBFeHBvIGFwcHMgdXNpbmcgbW9kZXJuIEV4cG8gVXBkYXRlcy5cbiAgICogUmV0dXJucyBgbnVsbGAgaW4gYmFyZSB3b3JrZmxvdyBhbmQgd2hlbiBgbWFuaWZlc3RgIGlzIG5vbi1udWxsLlxuICAgKi9cbiAgbWFuaWZlc3QyOiBNYW5pZmVzdCB8IG51bGw7XG4gIC8qKlxuICAgKiBBIHN0cmluZyB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgY3VycmVudCBzZXNzaW9uIG9mIHlvdXIgYXBwLiBJdCBpcyBkaWZmZXJlbnQgYWNyb3NzIGFwcHMgYW5kXG4gICAqIGFjcm9zcyBtdWx0aXBsZSBsYXVuY2hlcyBvZiB0aGUgc2FtZSBhcHAuXG4gICAqL1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHN0YXR1cyBiYXIgaGVpZ2h0IGZvciB0aGUgZGV2aWNlLiBEb2VzIG5vdCBmYWN0b3IgaW4gY2hhbmdlcyB3aGVuIGxvY2F0aW9uIHRyYWNraW5nXG4gICAqIGlzIGluIHVzZSBvciBhIHBob25lIGNhbGwgaXMgYWN0aXZlLlxuICAgKi9cbiAgc3RhdHVzQmFySGVpZ2h0OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIHN5c3RlbSBmb250IG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBkZXZpY2UuXG4gICAqL1xuICBzeXN0ZW1Gb250czogc3RyaW5nW107XG4gIHN5c3RlbVZlcnNpb24/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBzdXBwb3J0ZWRFeHBvU2Rrcz86IHN0cmluZ1tdO1xuICBwbGF0Zm9ybT86IFBsYXRmb3JtTWFuaWZlc3Q7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1c2VyIGFnZW50IHN0cmluZyB3aGljaCB3b3VsZCBiZSBpbmNsdWRlZCBpbiByZXF1ZXN0cyBzZW50IGJ5IGEgd2ViIHZpZXcgcnVubmluZyBvblxuICAgKiB0aGlzIGRldmljZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgdGhlIHNhbWUgdXNlciBhZ2VudCB5b3UgbWlnaHQgYmUgcHJvdmlkaW5nIGluIHlvdXIgSlMgYGZldGNoYFxuICAgKiByZXF1ZXN0cy5cbiAgICovXG4gIGdldFdlYlZpZXdVc2VyQWdlbnRBc3luYzogKCkgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsPjtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0YW50cyBleHRlbmRzIE5hdGl2ZUNvbnN0YW50cyB7XG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqIEB3YXJuaW5nIGRvIG5vdCB1c2UgdGhpcyBwcm9wZXJ0eS4gVXNlIGBtYW5pZmVzdGAgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogSW4gY2VydGFpbiBjYXNlcyBhY2Nlc3NpbmcgbWFuaWZlc3QgdmlhIHRoaXMgcHJvcGVydHlcbiAgICogc3VwcHJlc3NlcyBpbXBvcnRhbnQgd2FybmluZyBhYm91dCBtaXNzaW5nIG1hbmlmZXN0LlxuICAgKi9cbiAgX191bnNhZmVOb1dhcm5NYW5pZmVzdD86IEFwcE1hbmlmZXN0O1xuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAd2FybmluZyBkbyBub3QgdXNlIHRoaXMgcHJvcGVydHkuIFVzZSBgbWFuaWZlc3QyYCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBJbiBjZXJ0YWluIGNhc2VzIGFjY2Vzc2luZyBtYW5pZmVzdCB2aWEgdGhpcyBwcm9wZXJ0eVxuICAgKiBzdXBwcmVzc2VzIGltcG9ydGFudCB3YXJuaW5nIGFib3V0IG1pc3NpbmcgbWFuaWZlc3QuXG4gICAqL1xuICBfX3Vuc2FmZU5vV2Fybk1hbmlmZXN0Mj86IE1hbmlmZXN0O1xufVxuIl19